{"version":3,"sources":["../../src/controllers/push-notifications.controller.js"],"names":["admin","subscribe","req","res","next","console","log","body","database","ref","set","user","id","token","status","end","unsubscribe","remove"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;AACA;;AACA;;IAAYA,K;;;;;;;;;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;kBAEe;AACLC,aADK,qBACKC,GADL,EACUC,GADV,EACeC,IADf,EACqB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAC5BC,oCAAQC,GAAR,CAAY,6BAAZ,EAA2CJ,IAAIK,IAA/C;;AAD4B;AAAA;AAAA,mCAIlBP,MAAMQ,QAAN,GAAiBC,GAAjB,CAAqB,YAArB,EAAmCC,GAAnC,qBAA0CR,IAAIS,IAAJ,CAASC,EAAnD,EAAwDV,IAAIK,IAAJ,CAASM,KAAjE,EAJkB;;AAAA;AAKxBV,gCAAIW,MAAJ,CAAW,GAAX,EAAgBC,GAAhB;AALwB;AAAA;;AAAA;AAAA;AAAA;;AAOxBX;;AAPwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAS/B,KAVU;AAYLY,eAZK,uBAYOd,GAZP,EAYYC,GAZZ,EAYiBC,IAZjB,EAYuB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAEpBJ,MAAMQ,QAAN,GAAiBC,GAAjB,CAAqB,eAAeP,IAAIS,IAAJ,CAASC,EAA7C,EAAkDK,MAAlD,EAFoB;;AAAA;AAG1Bf,gCAAIY,MAAJ,CAAW,GAAX,EAAgBC,GAAhB;AAH0B;AAAA;;AAAA;AAAA;AAAA;;AAK1BX;;AAL0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOjC;AAnBU,C","file":"push-notifications.controller.js","sourcesContent":["import User from \"../models/user.model\";\nimport OfferMessageNotification from \"../models/offer-message-notification.model\";\nimport { ApiResponse2 } from \"../helpers/ApiResponse\";\nimport ApiError from \"../helpers/ApiError\";\nimport { isUserNotExist } from \"../helpers/CheckMethods\";\nimport { sendNotificationToUser } from '../helpers/PushNotificationsHelper';\nimport * as admin from \"firebase-admin\";\n\n// const validateSubcribtion = req => {\n//     req.checkBody(\"endpoint\").notEmpty().withMessage(\"endpoint required\").custom(async value => { \n//         let userSub = PushNotification.findOne({endpoint: value, relatedUser: req.user.id})\n//         if (userSub) \n//             throw new Error(\"User is already subscribed\");\n//     }).withMessage('User is already subscribed');\n//     req.checkBody(\"keys.p256dh\").notEmpty().withMessage(\"keys.p256dh required\");\n//     req.checkBody(\"keys.auth\").notEmpty().withMessage(\"Keys.auth required\");\n//     return req.getValidationResult();\n// }\n\nexport default {\n    async subscribe(req, res, next) {\n        console.log('BODY Of push notification: ', req.body);\n        \n        try {\n            await admin.database().ref('fcmTokens/').set({ [req.user.id]: req.body.token });\n            res.status(204).end();\n        } catch(err) {\n            next(err);\n        }    \n    },\n\n    async unsubscribe(req, res, next) {\n        try{\n            await admin.database().ref('fcmTokens/' + req.user.id ).remove()\n            req.status(204).end();\n        } catch(err) {\n            next(err);\n        }\n    }\n}\n\n"]}