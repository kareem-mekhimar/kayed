{"version":3,"sources":["../../src/controllers/push-notifications.controller.js"],"names":["validateSubcribtion","req","checkBody","notEmpty","withMessage","custom","value","userSub","findOne","endpoint","relatedUser","user","id","Error","getValidationResult","subscribe","res","next","console","log","body","create","pushNotification","status","end","unsubscribe","find","remove"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;AAEA,IAAMA,sBAAsB,SAAtBA,mBAAsB,MAAO;AAC/BC,QAAIC,SAAJ,CAAc,UAAd,EAA0BC,QAA1B,GAAqCC,WAArC,CAAiD,mBAAjD,EAAsEC,MAAtE;AAAA,2EAA6E,iBAAMC,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACrEC,mCADqE,GAC3D,eAAiBC,OAAjB,CAAyB,EAACC,UAAUH,KAAX,EAAkBI,aAAaT,IAAIU,IAAJ,CAASC,EAAxC,EAAzB,CAD2D;;AAAA,iCAErEL,OAFqE;AAAA;AAAA;AAAA;;AAAA,kCAG/D,IAAIM,KAAJ,CAAU,4BAAV,CAH+D;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA7E;;AAAA;AAAA;AAAA;AAAA,SAIGT,WAJH,CAIe,4BAJf;AAKAH,QAAIC,SAAJ,CAAc,aAAd,EAA6BC,QAA7B,GAAwCC,WAAxC,CAAoD,sBAApD;AACAH,QAAIC,SAAJ,CAAc,WAAd,EAA2BC,QAA3B,GAAsCC,WAAtC,CAAkD,oBAAlD;AACA,WAAOH,IAAIa,mBAAJ,EAAP;AACH,CATD;;kBAWe;AACLC,aADK,qBACKd,GADL,EACUe,GADV,EACeC,IADf,EACqB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC5BC,oCAAQC,GAAR,CAAY,6BAAZ,EAA2ClB,IAAImB,IAA/C;;AAEA;AACA;AACA;AACAnB,gCAAImB,IAAJ,CAASV,WAAT,GAAuBT,IAAIU,IAAJ,CAASC,EAAhC;AAN4B;AAAA;AAAA,mCAQK,eAAiBS,MAAjB,CAAwBpB,IAAImB,IAA5B,CARL;;AAAA;AAQpBE,4CARoB;;AASxB,gCAAIA,gBAAJ,EAAsB;AAClBJ,wCAAQC,GAAR,CAAY,0BAAZ;AACA,qFAAuB,WAAvB,EAAqC,EAArC,EAA2ClB,IAAIU,IAAJ,CAASC,EAApD;AACH,6BAHD,MAIK;AACDM,wCAAQC,GAAR,CAAY,wCAAZ;AACA,qFAAuB,UAAvB,EAAoC,EAApC,EAA0ClB,IAAIU,IAAJ,CAASC,EAAnD;AACH;;AAEDI,gCAAIO,MAAJ,CAAW,GAAX,EAAgBC,GAAhB;AAlBwB;AAAA;;AAAA;AAAA;AAAA;;AAoBxBP;;AApBwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsB/B,KAvBU;AAyBLQ,eAzBK,uBAyBOxB,GAzBP,EAyBYe,GAzBZ,EAyBiBC,IAzBjB,EAyBuB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCACxB,eAAiBS,IAAjB,CAAsB,EAAEhB,aAAaT,IAAIU,IAAJ,CAASC,EAAxB,EAAtB,EAAmDe,MAAnD,EADwB;;AAAA;AAE9B1B,gCAAIsB,MAAJ,CAAW,GAAX,EAAgBC,GAAhB;;AAF8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGjC;AA5BU,C","file":"push-notifications.controller.js","sourcesContent":["import User from \"../models/user.model\";\nimport OfferMessageNotification from \"../models/offer-message-notification.model\";\nimport { ApiResponse2 } from \"../helpers/ApiResponse\";\nimport ApiError from \"../helpers/ApiError\";\nimport { isUserNotExist } from \"../helpers/CheckMethods\";\nimport PushNotification from '../models/push.model';\nimport { sendNotificationToUser } from '../helpers/PushNotificationsHelper';\n\nconst validateSubcribtion = req => {\n    req.checkBody(\"endpoint\").notEmpty().withMessage(\"endpoint required\").custom(async value => { \n        let userSub = PushNotification.findOne({endpoint: value, relatedUser: req.user.id})\n        if (userSub) \n            throw new Error(\"User is already subscribed\");\n    }).withMessage('User is already subscribed');\n    req.checkBody(\"keys.p256dh\").notEmpty().withMessage(\"keys.p256dh required\");\n    req.checkBody(\"keys.auth\").notEmpty().withMessage(\"Keys.auth required\");\n    return req.getValidationResult();\n}\n\nexport default {\n    async subscribe(req, res, next) {\n        console.log('BODY Of push notification: ', req.body);\n        \n        // const validationErrors = await validateSubcribtion(req);\n        // if (!validationErrors.isEmpty())\n        //     return next(new ApiError(422, validationErrors.mapped()));\n        req.body.relatedUser = req.user.id;\n        try {\n            let pushNotification = await PushNotification.create(req.body);\n            if (pushNotification) {\n                console.log('Notification Saved TO DB')\n                sendNotificationToUser('Welcome..' , { } , req.user.id);\n            }\n            else {\n                console.log('Notification couldnt be saved to db.. ')\n                sendNotificationToUser('HIIIIIII' , { } , req.user.id);\n            }\n\n            res.status(204).end();\n        } catch(err) {\n            next(err);\n        }    \n    },\n\n    async unsubscribe(req, res, next) {\n        await PushNotification.find({ relatedUser: req.user.id}).remove();\n        req.status(204).end();\n    }\n}\n\n"]}