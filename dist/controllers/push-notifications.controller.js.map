{"version":3,"sources":["../../src/controllers/push-notifications.controller.js"],"names":["validateSubcribtion","req","checkBody","notEmpty","withMessage","custom","value","userSub","findOne","endpoint","relatedUser","user","id","Error","getValidationResult","subscribe","res","next","validationErrors","isEmpty","mapped","body","create","pushNotification","status","end","unsubscribe","find","remove"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;AACA;;;;;;;;AAGA,IAAMA,sBAAsB,SAAtBA,mBAAsB,MAAO;AAC/BC,QAAIC,SAAJ,CAAc,UAAd,EAA0BC,QAA1B,GAAqCC,WAArC,CAAiD,mBAAjD,EAAsEC,MAAtE;AAAA,2EAA6E,iBAAMC,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACrEC,mCADqE,GAC3D,eAAiBC,OAAjB,CAAyB,EAACC,UAAUH,KAAX,EAAkBI,aAAaT,IAAIU,IAAJ,CAASC,EAAxC,EAAzB,CAD2D;;AAAA,iCAErEL,OAFqE;AAAA;AAAA;AAAA;;AAAA,kCAG/D,IAAIM,KAAJ,CAAU,4BAAV,CAH+D;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA7E;;AAAA;AAAA;AAAA;AAAA,SAIGT,WAJH,CAIe,4BAJf;AAKAH,QAAIC,SAAJ,CAAc,aAAd,EAA6BC,QAA7B,GAAwCC,WAAxC,CAAoD,sBAApD;AACAH,QAAIC,SAAJ,CAAc,WAAd,EAA2BC,QAA3B,GAAsCC,WAAtC,CAAkD,oBAAlD;AACA,WAAOH,IAAIa,mBAAJ,EAAP;AACH,CATD;;kBAWe;AACLC,aADK,qBACKd,GADL,EACUe,GADV,EACeC,IADf,EACqB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCACGjB,oBAAoBC,GAApB,CADH;;AAAA;AACtBiB,4CADsB;;AAAA,gCAEvBA,iBAAiBC,OAAjB,EAFuB;AAAA;AAAA;AAAA;;AAAA,8DAGjBF,KAAK,uBAAa,GAAb,EAAkBC,iBAAiBE,MAAjB,EAAlB,CAAL,CAHiB;;AAAA;;AAK5BnB,gCAAIoB,IAAJ,CAASX,WAAT,GAAuBT,IAAIU,IAAJ,CAASC,EAAhC;AAL4B;AAAA;AAAA,mCAOK,eAAiBU,MAAjB,CAAwBrB,IAAIoB,IAA5B,CAPL;;AAAA;AAOpBE,4CAPoB;;AAQxBP,gCAAIQ,MAAJ,CAAW,GAAX,EAAgBC,GAAhB;AARwB;AAAA;;AAAA;AAAA;AAAA;;AAUxBR;;AAVwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAY/B,KAbU;AAeLS,eAfK,uBAeOzB,GAfP,EAeYe,GAfZ,EAeiBC,IAfjB,EAeuB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAExB,eAAiBU,IAAjB,CAAsB,EAAEjB,aAAaT,IAAIU,IAAJ,CAASC,EAAxB,EAAtB,EAAmDgB,MAAnD,EAFwB;;AAAA;;AAI9B3B,gCAAIuB,MAAJ,CAAW,GAAX,EAAgBC,GAAhB;;AAJ8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKjC;AApBU,C","file":"push-notifications.controller.js","sourcesContent":["import User from \"../models/user.model\";\nimport OfferMessageNotification from \"../models/offer-message-notification.model\";\nimport { ApiResponse2 } from \"../helpers/ApiResponse\";\nimport ApiError from \"../helpers/ApiError\";\nimport { isUserNotExist } from \"../helpers/CheckMethods\";\nimport PushNotification from '../models/push.model';\n\n\nconst validateSubcribtion = req => {\n    req.checkBody(\"endpoint\").notEmpty().withMessage(\"endpoint required\").custom(async value => { \n        let userSub = PushNotification.findOne({endpoint: value, relatedUser: req.user.id})\n        if (userSub) \n            throw new Error(\"User is already subscribed\");\n    }).withMessage('User is already subscribed');\n    req.checkBody(\"keys.p256dh\").notEmpty().withMessage(\"keys.p256dh required\");\n    req.checkBody(\"keys.auth\").notEmpty().withMessage(\"Keys.auth required\");\n    return req.getValidationResult();\n}\n\nexport default {\n    async subscribe(req, res, next) {\n        const validationErrors = await validateSubcribtion(req);\n        if (!validationErrors.isEmpty())\n            return next(new ApiError(422, validationErrors.mapped()));\n        \n        req.body.relatedUser = req.user.id;\n        try {\n            let pushNotification = await PushNotification.create(req.body);\n            res.status(204).end();\n        } catch(err) {\n            next(err);\n        }    \n    },\n\n    async unsubscribe(req, res, next) {\n        \n        await PushNotification.find({ relatedUser: req.user.id}).remove();\n\n        req.status(204).end();\n    }\n}\n\n"]}