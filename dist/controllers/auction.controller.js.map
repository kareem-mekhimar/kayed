{"version":3,"sources":["../../src/controllers/auction.controller.js"],"names":["validateAuctionBody","req","checkBody","notEmpty","withMessage","custom","findById","value","then","user","Error","category","matches","getValidationResult","findAll","res","next","page","query","limit","categories","startPrice","endPrice","finished","findQuery","find","countQuery","count","split","console","log","where","equals","gte","lte","populate","parseInt","sort","creationDate","skip","results","pageCount","Math","ceil","response","addSelfLink","addPrevLink","addNextLink","send","id","params","auction","toJSON","relatedAuction","offersCount","price","topAuctionOffers","topBids","length","i","bidderName","bidder","fullName","bidderImg","img","isInMyFavourites","favUsers","userId","inMyFavourites","create","result","isEmpty","mapped","imgs","body","highestPrice","url","Date","getTime","push","save","status","delete","remove","end"],"mappings":"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","file":"auction.controller.js","sourcesContent":["import Auction from \"../models/auction.model\";\nimport AuctionOffer from \"../models/auction-offer.model\"\nimport User from \"../models/user.model\";\nimport Category from \"../models/category.model\";\nimport ApiResponse from \"../helpers/ApiResponse\";\nimport ApiError from \"../helpers/ApiError\";\n\nimport { isInAll_MyOffers_favourites, isIn_MyOffers_favourites } from \"../helpers/Barter&AuctionHelper\";\n\nimport { writeBase64AndReturnUrl } from \"../utils\";\n\n\nconst validateAuctionBody = req => {\n\n    req.checkBody(\"relatedUser\").notEmpty().withMessage(\"relatedUser Required\")\n        .custom(value => {\n            return User.findById(value).then(user => {\n                if (!user)\n                    throw new Error(\"Related user Is Not Found\");\n            })\n        }).withMessage(\"relatedUser is Not Found in the system\");\n\n    req.checkBody(\"relatedCategory\").notEmpty().withMessage(\"relatedCategory Required\")\n        .custom(value => {\n            return Category.findById(value).then(category => {\n                if (!category)\n                    throw new Error(\"Related category Is Not Found\");\n            })\n        }).withMessage(\"relatedCategory is Not Found in the system\");\n\n    req.checkBody(\"title\").notEmpty().withMessage(\"title required\");\n    req.checkBody(\"description\").notEmpty().withMessage(\"Description required\");\n    req.checkBody(\"endDate\").notEmpty().withMessage(\"endDate required\");\n    req.checkBody(\"startPrice\").notEmpty().withMessage(\"startPrice required\").matches(/\\d/).withMessage(\"Invalid Number\");\n    req.checkBody(\"imgs\").notEmpty().withMessage(\"Provide at least one image\");\n\n    return req.getValidationResult();\n}\n\nexport default {\n\n    async findAll(req, res, next) {\n        let page = req.query.page;\n        let limit = req.query.limit;\n        let categories = req.query.categories;\n        let startPrice = req.query.startPrice;\n        let endPrice = req.query.endPrice;\n        let finished = req.query.finished;\n\n        if (startPrice && endPrice) {\n            if (endPrice < startPrice)\n                return next(new ApiError(400, \"startPrice Can't be more than endPrice\"));\n        }\n\n\n        let findQuery = Auction.find({});\n        let countQuery = Auction.count();\n\n        if (categories) {\n            categories = categories.split(',')\n            if(categories > 1){ \n                for(let category of categories){\n                    console.log(category)\n                    findQuery.where(\"relatedCategory\").equals(category);\n                    countQuery.where(\"relatedCategory\").equals(category);              \n                }\n            }\n            else {\n                findQuery.where(\"relatedCategory\").equals(categories);\n                countQuery.where(\"relatedCategory\").equals(categories);\n            }\n        }\n\n        if (startPrice) {\n            findQuery.where(\"highestPrice\").gte(startPrice);\n            countQuery.where(\"highestPrice\").gte(startPrice);\n        }\n\n\n        if (endPrice) {\n            findQuery.where(\"highestPrice\").lte(endPrice);\n            countQuery.where(\"highestPrice\").gte(endPrice);\n        }\n\n\n        if (typeof finished !== 'undefined') {\n            findQuery.where(\"finished\").equals(finished);\n            countQuery.where(\"finished\").equals(finished)\n        }\n\n        findQuery.populate('relatedUser relatedCategory');\n\n        page = page ? parseInt(page) : 1;\n        limit = limit ? limit : 20;\n\n        let results = await findQuery.sort({ creationDate: -1 })\n            .limit(parseInt(limit))\n            .skip((page - 1) * limit);\n\n        results = isInAll_MyOffers_favourites(results, req, false);\n        let count = await countQuery\n        let pageCount = Math.ceil(count / limit);\n        let response = new ApiResponse(results, page, pageCount, limit, count);\n\n        response.addSelfLink(req);\n\n        if (page > 1) {\n            response.addPrevLink(req);\n        }\n        if (page < pageCount) {\n            response.addNextLink(req);\n        }\n\n        res.send(response);\n\n    },\n\n    async findById(req, res, next) {\n\n        let id = req.params.id;\n        let auction = await Auction.findById(id).populate('relatedUser relatedCategory');\n\n        if (!auction) {\n            next(new ApiError(404, \"Auction with this id not found\"));\n        } else {\n\n            auction = { ...auction.toJSON() }\n            let count  = await AuctionOffer.count({ relatedAuction: id }) ;\n            auction.offersCount = count ;\n\n\n            let topAuctionOffers = await AuctionOffer.find({ relatedAuction: id }).sort({ price: -1 }).limit(3).populate(\"bidder\");\n            let topBids = {}\n            if (topAuctionOffers && topAuctionOffers.length > 0) {\n                for (let i = 0 ; i < topAuctionOffers.length ; i++) {       \n                    topBids[i+1] = { \n                        bidderName: topAuctionOffers[i].bidder.fullName,\n                        bidderImg: topAuctionOffers[i].bidder.img ,\n                        price: topAuctionOffers[i].price\n                     }\n                }\n\n                auction.topBids = topBids ;\n            }\n\n            let isInMyFavourites = false\n            for(let userId of auction.favUsers)\n            {\n                if (userId == req.user.id) {\n                    isInMyFavourites = true;\n                    break;\n                }\n            }\n            auction.inMyFavourites =  isInMyFavourites;\n            \n            res.send(auction)\n        }\n    },\n\n    async create(req, res, next) {\n\n        let result = await validateAuctionBody(req);\n\n        if (!result.isEmpty())\n            next(new ApiError(422, result.mapped()));\n        else {\n\n            try {\n                let imgs = req.body.imgs;\n                delete req.body.imgs;\n\n                req.body.highestPrice = req.body.startPrice;\n\n                let auction = await Auction.create(req.body);\n\n                for (let i = 0; i < imgs.length; i++) {\n                    let url = writeBase64AndReturnUrl(imgs[i], \"auctions/\" + auction.id + new Date().getTime(), req);\n                    auction.imgs.push(url);\n                }\n\n                await auction.save();\n\n                res.status(201).send(auction);\n\n            } catch (error) {\n                next(error)\n            }\n        }\n\n    },\n\n    async delete(req, res, next) {\n        let id = req.params.id;\n\n        let auction = await Auction.findById(id);\n\n        if (!auction)\n            next(new ApiError(404, \"Auction with this id not found\"));\n        else {\n            auction.remove();\n            res.status(204).end();\n        }\n    },\n}"]}