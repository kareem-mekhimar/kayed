{"version":3,"sources":["../../src/controllers/auction.controller.js"],"names":["validateAuctionBody","req","checkBody","notEmpty","withMessage","custom","findById","id","then","user","Error","category","matches","getValidationResult","findAll","res","next","page","query","limit","find","populate","parseInt","sort","_id","skip","results","count","pageCount","Math","ceil","response","ApiResponse","addSelfLink","addPrevLink","addNextLink","send","params","auction","create","result","isEmpty","mapped","imgs","body","img","url","delete"],"mappings":"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","file":"auction.controller.js","sourcesContent":["import Auction from \"../models/auction.model\";\nimport User from \"../models/user.model\";\nimport Category from \"../models/category.model\";\nimport ApiError from \"../helpers/ApiError\";\n\nimport { writeBase64AndReturnUrl } from \"../utils\";\n\n\nconst validateAuctionBody = req => {\n\n    req.checkBody(\"relatedUser\").notEmpty().withMessage(\"relatedUser Required\")\n        .custom(value => {\n            return User.findById(id).then(user => {\n                if (!user)\n                    throw new Error(\"Related user Is Not Found\");\n            })\n        }).withMessage(\"relatedUser is Not Found in the system\");\n\n    req.checkBody(\"relatedCategory\").notEmpty().withMessage(\"relatedCategory Required\")\n        .custom(value => {\n            return Category.findById(id).then(category => {\n                if (!category)\n                    throw new Error(\"Related category Is Not Found\");\n            })\n        }).withMessage(\"relatedCategory is Not Found in the system\");\n\n    req.checkBody(\"title\").notEmpty().withMessage(\"title required\");\n    req.checkBody(\"description\").notEmpty().withMessage(\"Description required\");\n    req.checkBody(\"endDate\").notEmpty().withMessage(\"endDate required\");\n    req.checkBody(\"startPrice\").notEmpty().withMessage(\"startPrice required\").matches(/\\d/).withMessage(\"Invalid Number\");\n    req.checkBody(\"imgs\").notEmpty().withMessage(\"Provide at least one image\") ;\n\n    return req.getValidationResult();\n}\n\n\nexport default {\n\n    async findAll(req, res, next) {\n        let page = req.query.page;\n        let limit = req.query.limit;\n\n        let query = Auction.find({}).populate('relatedUser', 'relatedCategory');\n\n        page = page ? parseInt(page) : 1;\n        limit = limit ? limit : 20;\n\n        let results = await query.sort({ _id: -1 })\n            .limit(parseInt(limit))\n            .skip((page - 1) * limit);\n\n        let count = await Auction.count();\n\n        let pageCount = Math.ceil(count / limit);\n        let response = new ApiResponse(results, page, pageCount, limit, count);\n\n        response.addSelfLink(req);\n\n        if (page > 1) {\n            response.addPrevLink(req);\n        }\n        if (page < pageCount) {\n            response.addNextLink(req);\n        }\n\n        res.send(response);\n\n    },\n\n    async findById(req, res, next) {\n\n        let id = req.params.id;\n        let auction = await Auction.findById(id).populate('relatedUser', 'relatedCategory');\n\n        if (!auction) {\n            next(new ApiError(404, \"Auction with this id not found\"));\n        } else {\n            res.send(auction)\n        }\n    },\n \n    async create(req, res, next) {\n\n        let result = await validateAuctionBody(req);\n\n        if (!result.isEmpty())\n            next(new ApiError(422, result.mapped()));\n        else {\n            let imgs = req.body.imgs ;\n            delete req.body.imgs ;\n\n            let auction = await Auction.create(req.body) ;\n\n            for(let img in imgs){\n                let url = writeBase64AndReturnUrl(\"auctions/auction\") ;\n            }\n        }\n\n    },\n\n    async delete(req, res, next) {\n        let id = req.params.id;\n    },\n\n}"]}