{"version":3,"sources":["../../src/controllers/barter-offer.controller.js"],"names":["validateBarterOffer","req","isUpdate","checkBody","notEmpty","withMessage","custom","value","findById","user","Error","isArray","isIn","optional","equals","getValidationResult","createBarterOffer","res","next","validationErrors","isEmpty","mapped","barterId","params","barter","NotFound","body","relatedBarter","create","createdBarterOffer","save","id","populate","barterOffer","status","send","offerId","updateBarterOffer","findByIdAndUpdate","finished","new","updatedBarterOffer"],"mappings":"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","file":"barter-offer.controller.js","sourcesContent":["import Barter from \"../models/barter.model\";\nimport BarterOffer from \"../models/barter-offer.model\"; \nimport User from \"../models/user.model\";\n\nimport ApiResponse from \"../helpers/ApiResponse\";\nimport ApiError from \"../helpers/ApiError\";\n\nconst validateBarterOffer = (req, isUpdate = false) => {\n    // req.checkBody(\"relatedBarter\").notEmpty().withMessage(\"relatedBarter is Required\").custom(async value => {\n    //     const barter = await Barter.findById(value);\n    //     if(!barter) throw new Error()\n    // }).withMessage('Enter a valid barter id');\n    \n    req.checkBody(\"relatedUser\").notEmpty().withMessage(\"relatedUser is Required\").custom(async value => {\n        const user = await User.findById(value);\n        if(!user) throw new Error()\n    }).withMessage('Enter a valid user id')\n\n    req.checkBody(\"description\").notEmpty().withMessage(\"description is required\");    \n    req.checkBody(\"offeredProduct\").notEmpty().withMessage(\"offeredProduct is required\");\n    req.checkBody(\"imgs\").notEmpty().withMessage(\"imgs is required\").isArray().withMessage(\"Imgs Should be an array of imgs's urls\");\n    if (isUpdate)\n        req.checkBody(\"status\").isIn(['PENDING','ACCEPTED','REJECTED','DONE']).withMessage('valid status is required')\n    else \n        req.checkBody(\"status\").optional().equals('PENDING').withMessage(\"you can't overwrite status it's PENDING by default\");\n    return req.getValidationResult();\n}\n\nexport default {\n    \n    async createBarterOffer(req, res, next) {   \n        const validationErrors = await validateBarterOffer(req);\n        if (!validationErrors.isEmpty())\n            return next(new ApiError(422, validationErrors.mapped()));\n        const { barterId } = req.params;\n            \n        try {\n            const barter = await Barter.findById(barterId);\n            if(!barter) \n                return  next(new ApiError.NotFound('Barter'));\n            else\n                req.body.relatedBarter = barterId;\n            const createdBarterOffer = await BarterOffer.create(req.body);\n            createdBarterOffer.save();\n            \n            const barterOffer = await BarterOffer.findById(createdBarterOffer.id).populate('relatedBarter relatedUser');\n            \n            res.status(201).send(barterOffer);            \n        }\n        catch (err) {\n            next(err);\n        }\n    },\n\n\n    async findById(req, res, next) {\n        const { offerId } = req.params;\n\n        try{\n            const barterOffer = await BarterOffer.findById(offerId).populate('relatedBarter relatedUser');\n            if (!barterOffer)\n                return next(new ApiError.NotFound('BarterOffer'));        \n            \n            res.send(barterOffer);\n        } catch(err) {\n            next(err);\n        }\n    },\n\n\n    async updateBarterOffer(req, res, next) {\n        const { offerId } = req.params;\n        \n        const validationErrors = await validateBarterOffer(req, true);\n        if (!validationErrors.isEmpty())\n            return next(new ApiError(422, validationErrors.mapped()));\n\n        try {\n            const barterOffer = await BarterOffer.findById(offerId).populate('relatedBarter relatedUser');\n            if(!barterOffer)\n                return next(new ApiError.NotFound('BarterOffer'));\n\n            switch(barterOffer.status){\n                case 'PENDING':\n                    if (!(req.body.status === 'ACCEPTED' || req.body.status === 'REJECTED'))\n                        return next(new ApiError(400, 'status should be ACCEPTED or REJECTED'));\n                    break;\n                case 'ACCEPTED':\n                    if (!(req.body.status === 'DONE' || req.body.status === 'REJECTED'))\n                        return next(new ApiError(400, 'status should be DONE or REJECTED'));\n                    break;\n                case 'REJECTED':\n                case 'DONE':\n                    return next(new ApiError(400, \"you can't update DONE or REJECTED offer\"));\n                    break;\n            }\n\n            if (req.body.status === 'DONE'){\n                await Barter.findByIdAndUpdate(req.body.relatedBarter, { \n                    barterOffer: barterOffer.id , finished: true \n                });    \n            }\n            const updatedBarterOffer = await BarterOffer.findByIdAndUpdate(offerId, req.body, { new: true });\n            res.status(200).send(updatedBarterOffer);    \n        }\n        catch (err) {\n            next(err);\n        }\n    }\n\n}"]}