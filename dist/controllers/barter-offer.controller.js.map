{"version":3,"sources":["../../src/controllers/barter-offer.controller.js"],"names":["validateBarterOffer","req","isUpdate","checkBody","isIn","withMessage","notEmpty","custom","value","findById","user","Error","isArray","optional","matches","checkParams","barter","getValidationResult","createBarterOffer","res","next","validationErrors","isEmpty","mapped","barterId","params","newBarterOfferId","Types","ObjectId","body","imgs","relatedBarter","create","_id","createdBarterOffer","id","populate","barterOffer","status","send","offerId","findOne","NotFound","updateBarterOffer","findByIdAndUpdate","finished","new","updatedBarterOffer"],"mappings":"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","file":"barter-offer.controller.js","sourcesContent":["import Barter from \"../models/barter.model\";\nimport BarterOffer from \"../models/barter-offer.model\"; \nimport User from \"../models/user.model\";\nimport mongoose from \"mongoose\" ;\nimport { handleImgs }  from \"../utils\";\n\nimport ApiResponse from \"../helpers/ApiResponse\";\nimport ApiError from \"../helpers/ApiError\";\n\nconst validateBarterOffer = (req, isUpdate = false) => {\n    if (isUpdate)\n        req.checkBody(\"status\").isIn(['PENDING','ACCEPTED','REJECTED','DONE']).withMessage('valid status is required');\n    else {   \n        req.checkBody(\"relatedUser\").notEmpty().withMessage(\"relatedUser is Required\").custom(async value => {\n            const user = await User.findById(value);\n            if(!user) throw new Error()\n        }).withMessage('Enter a valid user id')\n        req.checkBody(\"description\").notEmpty().withMessage(\"description is required\");    \n        req.checkBody(\"offeredProduct\").notEmpty().withMessage(\"offeredProduct is required\");\n        req.checkBody(\"imgs\").notEmpty().withMessage(\"imgs is required\").isArray().withMessage(\"Imgs Should be an array of imgs's base64\");\n        req.checkBody(\"status\").optional().matches('PENDING').withMessage(\"you can't overwrite status it's PENDING by default\");\n    } \n    req.checkParams(\"barterId\").custom(async value => {\n        const barter = await Barter.findById(value);\n        if(!barter) new new Error();\n    }).withMessage('Barter Not Found');\n    \n    return req.getValidationResult();\n}\n\nexport default {\n    \n    async createBarterOffer(req, res, next) {   \n        const validationErrors = await validateBarterOffer(req);\n        if (!validationErrors.isEmpty())\n            return next(new ApiError(422, validationErrors.mapped()));\n       \n        const { barterId } = req.params;\n\n        try {\n            const newBarterOfferId = mongoose.Types.ObjectId();\n            if (req.body.imgs)\n                req.body.imgs = handleImgs(req.body.imgs, \"barter-offers\", newBarterOfferId , req);\n            req.body.relatedBarter = barterId;\n            \n            let createdBarterOffer = await BarterOffer.create({_id : newBarterOfferId, ...req.body});\n\n            const barterOffer = await BarterOffer.findById(createdBarterOffer.id).populate('relatedBarter relatedUser');\n            \n            res.status(201).send(barterOffer);            \n        }\n        catch (err) {\n            next(err);\n        }\n    },\n\n\n    async findById(req, res, next) {\n        const { barterId, offerId } = req.params;\n\n        try{\n            const barterOffer = await BarterOffer.findOne({_id: offerId, relatedBarter: barterId }).populate('relatedBarter relatedUser');\n            if (!barterOffer)\n                return next(new ApiError.NotFound('BarterOffer'));        \n            \n            res.send(barterOffer);\n        } catch(err) {\n            next(err);\n        }\n    },\n\n    // Update Status of BarterOffer only\n    async updateBarterOffer(req, res, next) {\n        const validationErrors = await validateBarterOffer(req, true);\n        if (!validationErrors.isEmpty())\n            return next(new ApiError(422, validationErrors.mapped()));\n        \n        const { barterId, offerId } = req.params;\n        try {\n            const barterOffer = await BarterOffer.findOne({ _id : offerId , relatedBarter: barterId } );\n            if(!barterOffer)\n                return next(new ApiError.NotFound('BarterOffer'));\n    \n            switch(barterOffer.status){\n                case 'PENDING':\n                    if (!(req.body.status === 'ACCEPTED' || req.body.status === 'REJECTED'))\n                        return next(new ApiError(400, 'status should be ACCEPTED or REJECTED'));\n                    break;\n                case 'ACCEPTED':\n                    if (!(req.body.status === 'DONE' || req.body.status === 'REJECTED'))\n                        return next(new ApiError(400, 'status should be DONE or REJECTED'));\n                    break;\n                case 'REJECTED':\n                case 'DONE':\n                    return next(new ApiError(400, \"you can't update DONE or REJECTED offer\"));\n                    break;\n            }\n\n            if (req.body.status === 'DONE'){\n                await Barter.findByIdAndUpdate(barterId, {\n                    barterOffer: barterOffer.id , finished: true \n                });\n            }\n            const updatedBarterOffer = await BarterOffer.findByIdAndUpdate(offerId, { status: req.body.status} , { new: true });\n            res.status(200).send(updatedBarterOffer);    \n        }\n        catch (err) {\n            next(err);\n        }\n    }\n\n}"]}