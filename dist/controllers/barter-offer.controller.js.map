{"version":3,"sources":["../../src/controllers/barter-offer.controller.js"],"names":["validateBarterOffer","req","isUpdate","checkBody","isIn","withMessage","notEmpty","custom","value","findById","user","Error","isArray","optional","matches","checkParams","barter","getValidationResult","registerMeInBarter","barterId","where","equals","id","wantedBarter","findByIdAndUpdate","$push","offerUsers","findAll","res","next","params","query","page","limit","status","relatedBarter","includes","parseInt","find","populate","sort","creationDate","skip","barterOffers","count","barterOffersCount","pageCount","Math","ceil","response","addSelfLink","addPrevLink","addNextLink","send","createBarterOffer","validationErrors","isEmpty","mapped","newBarterOfferId","Types","ObjectId","body","imgs","create","_id","createdBarterOffer","barterOffer","offerId","findOne","NotFound","updateBarterOffer","finished","filter","relatedUser","console","log","save","new","updatedBarterOffer"],"mappings":"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","file":"barter-offer.controller.js","sourcesContent":["import Barter from \"../models/barter.model\";\nimport BarterOffer from \"../models/barter-offer.model\"; \nimport User from \"../models/user.model\";\nimport mongoose from \"mongoose\" ;\nimport { handleImgs }  from \"../utils\";\n\nimport ApiResponse from \"../helpers/ApiResponse\";\nimport ApiError from \"../helpers/ApiError\";\n\nconst validateBarterOffer = (req, isUpdate = false) => {\n    if (isUpdate)\n        req.checkBody(\"status\").isIn(['PENDING','ACCEPTED','REJECTED','DONE']).withMessage('valid status is required');\n    else {   \n        req.checkBody(\"relatedUser\").notEmpty().withMessage(\"relatedUser is Required\").custom(async value => {\n            const user = await User.findById(value);\n            if(!user) throw new Error()\n        }).withMessage('Enter a valid user id')\n        req.checkBody(\"description\").notEmpty().withMessage(\"description is required\");    \n        req.checkBody(\"offeredProduct\").notEmpty().withMessage(\"offeredProduct is required\");\n        req.checkBody(\"imgs\").notEmpty().withMessage(\"imgs is required\").isArray().withMessage(\"Imgs Should be an array of imgs's base64\");\n        req.checkBody(\"status\").optional().matches('PENDING').withMessage(\"you can't overwrite status it's PENDING by default\");\n    } \n    req.checkParams(\"barterId\").custom(async value => {\n        const barter = await Barter.findById(value);\n        if(!barter) new new Error();\n    }).withMessage('Barter Not Found');\n    \n    return req.getValidationResult();\n};\n\nconst registerMeInBarter = async (barterId, req) => {\n    const wantedBarter =  await Barter.findById(barterId).where('offerUsers').equals(req.user.id);\n    if(!wantedBarter)\n        await Barter.findByIdAndUpdate(barterId, { $push: { offerUsers: req.user.id } });    \n};\n\nexport default {\n    async findAll(req, res, next) {\n        let { barterId } = req.params\n        let { page, limit, status } = req.query;\n        let query = {\n            relatedBarter: barterId\n        };\n\n        if(status && ['PENDING','ACCEPTED','REJECTED','DONE'].includes(status))\n            query.status = status;            \n            \n        page = page ? parseInt(page) : 1;\n        limit = limit ? parseInt(limit) : 20;\n\n        try { \n            const barterOffers = await BarterOffer.find(query).populate('relatedBarter relatedUser')\n                                .sort({ creationDate: -1 })\n                                .limit(limit)\n                                .skip((page - 1) * limit);\n                                \n            const barterOffersCount = await BarterOffer.count(query);\n            \n            const pageCount = Math.ceil(barterOffersCount / limit);\n            let response = new ApiResponse(barterOffers, page, pageCount, limit, barterOffersCount);\n            response.addSelfLink(req);\n\n            if (page > 1) {\n                response.addPrevLink(req);\n            }\n            if (page < pageCount) {\n                response.addNextLink(req);\n            }\n            res.send(response);\n        }catch(err){\n            next(err);\n        }        \n    },\n\n\n    async createBarterOffer(req, res, next) {   \n        const validationErrors = await validateBarterOffer(req);\n        if (!validationErrors.isEmpty())\n            return next(new ApiError(422, validationErrors.mapped()));\n       \n        const { barterId } = req.params;\n\n        try {\n            const newBarterOfferId = mongoose.Types.ObjectId();\n            if (req.body.imgs)\n                req.body.imgs = handleImgs(req.body.imgs, \"barter-offers\", newBarterOfferId , req);\n            req.body.relatedBarter = barterId;\n            \n            let createdBarterOffer = await BarterOffer.create({_id : newBarterOfferId, ...req.body});\n            \n            await Barter.findByIdAndUpdate(barterId, { $push: { offerUsers: req.user.id } });\n\n            registerMeInBarter(barterId, req);            \n            const barterOffer = await BarterOffer.findById(createdBarterOffer.id).populate('relatedBarter relatedUser');\n                        \n            res.status(201).send(barterOffer);            \n        }\n        catch (err) {\n            next(err);\n        }\n    },\n\n\n    async findById(req, res, next) {\n        const { barterId, offerId } = req.params;\n\n        try{\n            const barterOffer = await BarterOffer.findOne({_id: offerId, relatedBarter: barterId }).populate('relatedBarter relatedUser');\n            if (!barterOffer)\n                return next(new ApiError.NotFound('BarterOffer'));        \n            \n            res.send(barterOffer);\n        } catch(err) {\n            next(err);\n        }\n    },\n\n    // Update Status of BarterOffer only\n    async updateBarterOffer(req, res, next) {\n        const validationErrors = await validateBarterOffer(req, true);\n        if (!validationErrors.isEmpty())\n            return next(new ApiError(422, validationErrors.mapped()));\n        \n        const { barterId, offerId } = req.params;\n        try {\n            const barterOffer = await BarterOffer.findOne({ _id : offerId , relatedBarter: barterId } ).populate('relatedUser');\n            if(!barterOffer)\n                return next(new ApiError.NotFound('BarterOffer'));\n    \n            switch(barterOffer.status){\n                case 'PENDING':\n                    if (!(req.body.status === 'ACCEPTED' || req.body.status === 'REJECTED'))\n                        return next(new ApiError(400, 'status should be ACCEPTED or REJECTED'));\n                    break;\n                case 'ACCEPTED':\n                    if (!(req.body.status === 'DONE' || req.body.status === 'REJECTED'))\n                        return next(new ApiError(400, 'status should be DONE or REJECTED'));\n                    break;\n                case 'REJECTED':\n                case 'DONE':\n                    return next(new ApiError(400, \"you can't update DONE or REJECTED offer\"));\n                    break;\n            }\n\n            if (req.body.status === 'DONE'){\n                await Barter.findByIdAndUpdate(barterId, {\n                    barterOffer: barterOffer.id , finished: true \n                });\n            }\n\n\n            if (req.body.status === 'REJECTED'){\n                let barter = await Barter.findById(barterId);\n                barter.offerUsers = barter.offerUsers.filter(user => { \n                    user != barterOffer.relatedUser.id });\n                console.log(\"Rejected offer in :\" , barter);\n                barter.save();\n            }\n\n            const updatedBarterOffer = await BarterOffer.findByIdAndUpdate(offerId, { status: req.body.status} , { new: true });\n            res.status(200).send(updatedBarterOffer);    \n        }\n        catch (err) {\n            next(err);\n        }\n    }\n\n}"]}