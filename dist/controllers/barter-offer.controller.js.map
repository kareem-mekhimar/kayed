{"version":3,"sources":["../../src/controllers/barter-offer.controller.js"],"names":["validateBarterOffer","req","isUpdate","checkBody","isIn","withMessage","notEmpty","custom","value","findById","user","Error","isArray","optional","matches","checkParams","barter","getValidationResult","findAll","res","next","barterId","params","query","page","limit","status","relatedBarter","includes","parseInt","find","populate","sort","creationDate","skip","barterOffers","count","barterOffersCount","pageCount","Math","ceil","response","addSelfLink","addPrevLink","addNextLink","send","createBarterOffer","validationErrors","isEmpty","mapped","newBarterOfferId","Types","ObjectId","body","imgs","create","_id","createdBarterOffer","findByIdAndUpdate","$push","offerUsers","id","barterOffer","offerId","findOne","NotFound","updateBarterOffer","finished","new","updatedBarterOffer"],"mappings":"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","file":"barter-offer.controller.js","sourcesContent":["import Barter from \"../models/barter.model\";\nimport BarterOffer from \"../models/barter-offer.model\"; \nimport User from \"../models/user.model\";\nimport mongoose from \"mongoose\" ;\nimport { handleImgs }  from \"../utils\";\n\nimport ApiResponse from \"../helpers/ApiResponse\";\nimport ApiError from \"../helpers/ApiError\";\n\nconst validateBarterOffer = (req, isUpdate = false) => {\n    if (isUpdate)\n        req.checkBody(\"status\").isIn(['PENDING','ACCEPTED','REJECTED','DONE']).withMessage('valid status is required');\n    else {   \n        req.checkBody(\"relatedUser\").notEmpty().withMessage(\"relatedUser is Required\").custom(async value => {\n            const user = await User.findById(value);\n            if(!user) throw new Error()\n        }).withMessage('Enter a valid user id')\n        req.checkBody(\"description\").notEmpty().withMessage(\"description is required\");    \n        req.checkBody(\"offeredProduct\").notEmpty().withMessage(\"offeredProduct is required\");\n        req.checkBody(\"imgs\").notEmpty().withMessage(\"imgs is required\").isArray().withMessage(\"Imgs Should be an array of imgs's base64\");\n        req.checkBody(\"status\").optional().matches('PENDING').withMessage(\"you can't overwrite status it's PENDING by default\");\n    } \n    req.checkParams(\"barterId\").custom(async value => {\n        const barter = await Barter.findById(value);\n        if(!barter) new new Error();\n    }).withMessage('Barter Not Found');\n    \n    return req.getValidationResult();\n}\n\nexport default {\n    async findAll(req, res, next) {\n        let { barterId } = req.params\n        let { page, limit, status } = req.query;\n        let query = {\n            relatedBarter: barterId\n        };\n\n        if(status && ['PENDING','ACCEPTED','REJECTED','DONE'].includes(status))\n            query.status = status;            \n            \n        page = page ? parseInt(page) : 1;\n        limit = limit ? parseInt(limit) : 20;\n\n        try { \n            const barterOffers = await BarterOffer.find(query).populate('relatedBarter relatedUser')\n                                .sort({ creationDate: -1 })\n                                .limit(limit)\n                                .skip((page - 1) * limit);\n                                \n            const barterOffersCount = await BarterOffer.count(query);\n            \n            const pageCount = Math.ceil(barterOffersCount / limit);\n            let response = new ApiResponse(barterOffers, page, pageCount, limit, barterOffersCount);\n            response.addSelfLink(req);\n\n            if (page > 1) {\n                response.addPrevLink(req);\n            }\n            if (page < pageCount) {\n                response.addNextLink(req);\n            }\n            res.send(response);\n        }catch(err){\n            next(err);\n        }        \n    },\n\n    async createBarterOffer(req, res, next) {   \n        const validationErrors = await validateBarterOffer(req);\n        if (!validationErrors.isEmpty())\n            return next(new ApiError(422, validationErrors.mapped()));\n       \n        const { barterId } = req.params;\n\n        try {\n            const newBarterOfferId = mongoose.Types.ObjectId();\n            if (req.body.imgs)\n                req.body.imgs = handleImgs(req.body.imgs, \"barter-offers\", newBarterOfferId , req);\n            req.body.relatedBarter = barterId;\n            \n            let createdBarterOffer = await BarterOffer.create({_id : newBarterOfferId, ...req.body});\n            \n            await Barter.findByIdAndUpdate(barterId, { $push: { offerUsers: req.user.id } });\n\n            const barterOffer = await BarterOffer.findById(createdBarterOffer.id).populate('relatedBarter relatedUser');\n                        \n            res.status(201).send(barterOffer);            \n        }\n        catch (err) {\n            next(err);\n        }\n    },\n\n\n    async findById(req, res, next) {\n        const { barterId, offerId } = req.params;\n\n        try{\n            const barterOffer = await BarterOffer.findOne({_id: offerId, relatedBarter: barterId }).populate('relatedBarter relatedUser');\n            if (!barterOffer)\n                return next(new ApiError.NotFound('BarterOffer'));        \n            \n            res.send(barterOffer);\n        } catch(err) {\n            next(err);\n        }\n    },\n\n    // Update Status of BarterOffer only\n    async updateBarterOffer(req, res, next) {\n        const validationErrors = await validateBarterOffer(req, true);\n        if (!validationErrors.isEmpty())\n            return next(new ApiError(422, validationErrors.mapped()));\n        \n        const { barterId, offerId } = req.params;\n        try {\n            const barterOffer = await BarterOffer.findOne({ _id : offerId , relatedBarter: barterId } );\n            if(!barterOffer)\n                return next(new ApiError.NotFound('BarterOffer'));\n    \n            switch(barterOffer.status){\n                case 'PENDING':\n                    if (!(req.body.status === 'ACCEPTED' || req.body.status === 'REJECTED'))\n                        return next(new ApiError(400, 'status should be ACCEPTED or REJECTED'));\n                    break;\n                case 'ACCEPTED':\n                    if (!(req.body.status === 'DONE' || req.body.status === 'REJECTED'))\n                        return next(new ApiError(400, 'status should be DONE or REJECTED'));\n                    break;\n                case 'REJECTED':\n                case 'DONE':\n                    return next(new ApiError(400, \"you can't update DONE or REJECTED offer\"));\n                    break;\n            }\n\n            if (req.body.status === 'DONE'){\n                await Barter.findByIdAndUpdate(barterId, {\n                    barterOffer: barterOffer.id , finished: true \n                });\n            }\n            const updatedBarterOffer = await BarterOffer.findByIdAndUpdate(offerId, { status: req.body.status} , { new: true });\n            res.status(200).send(updatedBarterOffer);    \n        }\n        catch (err) {\n            next(err);\n        }\n    }\n\n}"]}