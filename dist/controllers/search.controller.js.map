{"version":3,"sources":["../../src/controllers/search.controller.js"],"names":["search","req","res","next","query","q","page","limit","send","barters","auctions","$text","$search","parseInt","count","barterCount","auctionCount","halfLimit","Math","ceil","pageCount","min","find","populate","sort","creationDate","skip","response","undefined","length","status"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;kBAEe;AACLA,UADK,kBACEC,GADF,EACOC,GADP,EACYC,IADZ,EACkB;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,yCACAF,IAAIG,KADJ,EACnBC,CADmB,cACnBA,CADmB,EAChBC,IADgB,cAChBA,IADgB,EACVC,KADU,cACVA,KADU;;AAEzB,gCAAI,CAACF,CAAL,EAAQ;AACJH,oCAAIM,IAAJ,CAAS,EAAEC,SAAS,EAAX,EAAeC,UAAU,EAAzB,EAAT;AACH;;AAEGN,iCANqB,GAMb;AACRO,uCAAO,EAAEC,SAASP,CAAX;AADC,6BANa;;;AAUzBC,mCAAOA,OAAOO,SAASP,IAAT,CAAP,GAAwB,CAA/B;AACAC,oCAAQA,QAAQM,SAASN,KAAT,CAAR,GAA0B,EAAlC;;AAXyB;AAAA;AAAA,mCAeG,iBAAOO,KAAP,CAAaV,KAAb,CAfH;;AAAA;AAejBW,uCAfiB;AAAA;AAAA,mCAgBI,kBAAQD,KAAR,CAAcV,KAAd,CAhBJ;;AAAA;AAgBjBY,wCAhBiB;AAkBjBC,qCAlBiB,GAkBLV,QAAQW,KAAKC,IAAL,CAAUZ,QAAQ,CAAlB,CAAR,GAA+B,CAlB1B;AAmBjBa,qCAnBiB,GAmBLF,KAAKC,IAAL,CAAUJ,cAAcC,eAAeT,KAAvC,CAnBK;;;AAsBrB,gCAAID,QAAQ,CAAR,KAAcS,cAAcE,SAAd,IAA2BD,eAAcC,SAAvD,CAAJ,EACIA,aAAaA,YAAYC,KAAKG,GAAL,CAASN,WAAT,EAAsBC,YAAtB,CAAzB;;AAEJ,gCAAIV,OAAOY,KAAKC,IAAL,CAAWD,KAAKG,GAAL,CAASN,WAAT,EAAsBC,YAAtB,IAAsCT,KAAvC,GAAgD,CAA1D,CAAX,EACIU,YAAYV,KAAZ;;AA1BiB;AAAA,mCA4BD,iBAAOe,IAAP,CAAYlB,KAAZ,EACfmB,QADe,CACN,6BADM,EAEfC,IAFe,CAEV,EAAEC,cAAc,CAAC,CAAjB,EAFU,EAGflB,KAHe,CAGTU,SAHS,EAIfS,IAJe,CAIV,CAACpB,OAAO,CAAR,IAAaC,KAJH,CA5BC;;AAAA;AA4BjBE,mCA5BiB;AAAA;AAAA,mCAkCA,kBAAQa,IAAR,CAAalB,KAAb,EAChBmB,QADgB,CACP,6BADO,EAEhBC,IAFgB,CAEX,EAAEC,cAAc,CAAC,CAAjB,EAFW,EAGhBlB,KAHgB,CAGVU,SAHU,EAIhBS,IAJgB,CAIX,CAACpB,OAAO,CAAR,IAAaC,KAJF,CAlCA;;AAAA;AAkCjBG,oCAlCiB;AAAA;AAAA,mCAwCL,wDAA8BD,OAA9B,EAAuCR,GAAvC,EAA4C,IAA5C,CAxCK;;AAAA;AAwCrBQ,mCAxCqB;AAAA;AAAA,mCAyCJ,wDAA8BC,QAA9B,EAAwCT,GAAxC,EAA6C,KAA7C,CAzCI;;AAAA;AAyCrBS,oCAzCqB;AA2CjBiB,oCA3CiB,GA2CN,8BAAiBC,SAAjB,EAA4BtB,IAA5B,EAAkCc,SAAlC,EAA6Cb,KAA7C,EAAoDE,QAAQoB,MAAR,GAAiBnB,SAASmB,MAA9E,EAAsF5B,GAAtF,CA3CM;;;AA6CrBC,gCAAI4B,MAAJ,CAAW,GAAX,EAAgBtB,IAAhB,YAAuBC,gBAAvB,EAAgCC,kBAAhC,IAA6CiB,QAA7C;;AA7CqB;AAAA;;AAAA;AAAA;AAAA;;AAgDrBxB;;AAhDqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkD5B;AAnDU,C","file":"search.controller.js","sourcesContent":["import mongoose from \"mongoose\";\nimport Barter from \"../models/barter.model\";\nimport Auction from \"../models/auction.model\";\nimport { ApiResponse2 } from \"../helpers/ApiResponse\"\nimport { checkAllMyOfferAndFavouriteIn } from \"../helpers/Barter&AuctionHelper\";\n\nexport default {\n    async search(req, res, next) {\n        let { q, page, limit } = req.query;\n        if (!q) {\n            res.send({ barters: [], auctions: [] });\n        }\n\n        let query = {\n            $text: { $search: q }\n        };\n\n        page = page ? parseInt(page) : 1;\n        limit = limit ? parseInt(limit) : 10;\n\n        try {\n\n            let barterCount = await Barter.count(query);\n            let auctionCount = await Auction.count(query);\n\n            let halfLimit = limit ? Math.ceil(limit / 2) : 5;\n            let pageCount = Math.ceil(barterCount + auctionCount / limit);\n\n            \n            if (page == 1 && (barterCount < halfLimit || auctionCount< halfLimit))\n                halfLimit += halfLimit - Math.min(barterCount, auctionCount)\n           \n            if (page > Math.ceil((Math.min(barterCount, auctionCount) / limit) * 2 ))\n                halfLimit = limit;\n \n            let barters = await Barter.find(query)\n                .populate('relatedCategory relatedUser')\n                .sort({ creationDate: -1 })\n                .limit(halfLimit)\n                .skip((page - 1) * limit);\n\n            let auctions = await Auction.find(query)\n                .populate('relatedCategory relatedUser')\n                .sort({ creationDate: -1 })\n                .limit(halfLimit)\n                .skip((page - 1) * limit);\n\n            barters = await checkAllMyOfferAndFavouriteIn(barters, req, true);\n            auctions = await checkAllMyOfferAndFavouriteIn(auctions, req, false);\n\n            let response = new ApiResponse2(undefined, page, pageCount, limit, barters.length + auctions.length, req);\n\n            res.status(200).send({ barters, auctions, ...response });\n\n        } catch (err) {\n            next(err);\n        }\n    }\n}\n\n"]}