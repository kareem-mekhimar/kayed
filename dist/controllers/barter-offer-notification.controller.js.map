{"version":3,"sources":["../../src/controllers/barter-offer-notification.controller.js"],"names":["findAll","req","res","next","params","id","query","page","limit","parseInt","find","user","populate","sort","creationDate","skip","notifications","count","notificationsCount","pageCount","Math","ceil","response","send","findManyUnseen","seen","resetAll","update","multi","status","end"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;kBAGe;AACLA,WADK,mBACGC,GADH,EACQC,GADR,EACaC,IADb,EACmB;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAEpB,kCAAeF,IAAIG,MAAJ,CAAWC,EAA1B,EAA8BF,IAA9B,CAFoB;;AAAA;AAAA,yCAKJF,IAAIK,KALA,EAKpBC,IALoB,cAKpBA,IALoB,EAKdC,KALc,cAKdA,KALc;;;AAO1BD,mCAAOA,OAAOE,SAASF,IAAT,CAAP,GAAwB,CAA/B;AACAC,oCAAQA,QAAQC,SAASD,KAAT,CAAR,GAA0B,EAAlC;;AAR0B;AAAA;AAAA,mCAWI,kCAAuBE,IAAvB,CAA4B,EAAEC,MAAMV,IAAIU,IAAJ,CAASN,EAAjB,EAA5B,EAAmDO,QAAnD,CAA4D,yBAA5D,EACrBC,IADqB,CAChB,EAAEC,cAAc,CAAC,CAAjB,EADgB,EAErBN,KAFqB,CAEfA,KAFe,EAGrBO,IAHqB,CAGhB,CAACR,OAAO,CAAR,IAAaC,KAHG,CAXJ;;AAAA;AAWlBQ,yCAXkB;AAAA;AAAA,mCAgBW,kCAAuBC,KAAvB,CAA6B,EAAEN,MAAMV,IAAIU,IAAJ,CAASN,EAAjB,EAA7B,CAhBX;;AAAA;AAgBhBa,8CAhBgB;AAkBhBC,qCAlBgB,GAkBJC,KAAKC,IAAL,CAAUH,qBAAqBV,KAA/B,CAlBI;AAmBlBc,oCAnBkB,GAmBP,8BAAiBN,aAAjB,EAAgCT,IAAhC,EAAsCY,SAAtC,EAAiDX,KAAjD,EAAwDU,kBAAxD,EAA4EjB,GAA5E,CAnBO;;;AAqBtBC,gCAAIqB,IAAJ,CAASD,QAAT;AArBsB;AAAA;;AAAA;AAAA;AAAA;;AAuBtBnB;;AAvBsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyB7B,KA1BU;AA6BLqB,kBA7BK,0BA6BUvB,GA7BV,EA6BeC,GA7Bf,EA6BoBC,IA7BpB,EA6B0B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAE3B,kCAAeF,IAAIG,MAAJ,CAAWC,EAA1B,EAA8BF,IAA9B,CAF2B;;AAAA;AAAA;AAAA,mCAKP,kCAAuBO,IAAvB,CAA4B,EAAEC,MAAMV,IAAIU,IAAJ,CAASN,EAAjB,EAAqBoB,MAAM,KAA3B,EAA5B,EAAgEb,QAAhE,CAAyE,yBAAzE,EACrBC,IADqB,CAChB,EAAEC,cAAc,CAAC,CAAjB,EADgB,EAErBN,KAFqB,CAEf,EAFe,CALO;;AAAA;AAK7BQ,yCAL6B;;;AASjCd,gCAAIqB,IAAJ,CAASP,aAAT;;AATiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUpC,KAvCU;AA0CLU,YA1CK,oBA0CIzB,GA1CJ,EA0CSC,GA1CT,EA0CcC,IA1Cd,EA0CoB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAErB,kCAAeF,IAAIG,MAAJ,CAAWC,EAA1B,EAA8BF,IAA9B,CAFqB;;AAAA;AAAA;AAAA,mCAIrB,kCAAuBwB,MAAvB,CAA8B,EAAEhB,MAAMV,IAAIU,IAAJ,CAASN,EAAjB,EAAqBoB,MAAM,KAA3B,EAA9B,EAAkE,EAAEA,MAAM,IAAR,EAAlE,EAAkF,EAAEG,OAAO,IAAT,EAAlF,CAJqB;;AAAA;;AAM3B1B,gCAAI2B,MAAJ,CAAW,GAAX,EAAgBC,GAAhB;;AAN2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAO9B;AAjDU,C","file":"barter-offer-notification.controller.js","sourcesContent":["import User from \"../models/user.model\";\nimport BarterOfferNotifcation from \"../models/barter-offer-notification.model\";\nimport { ApiResponse2 } from \"../helpers/ApiResponse\";\nimport ApiError from \"../helpers/ApiError\";\nimport { checkUserExist } from '../helpers/CheckMethods';\n\n\nexport default {\n    async findAll(req, res, next) {\n        \n        await checkUserExist(req.params.id, next);\n        \n\n        let { page, limit } = req.query;\n\n        page = page ? parseInt(page) : 1;\n        limit = limit ? parseInt(limit) : 20;\n\n        try {\n            let notifications = await BarterOfferNotifcation.find({ user: req.user.id }).populate(\"offerUser relatedBarter\")\n                .sort({ creationDate: -1 })\n                .limit(limit)\n                .skip((page - 1) * limit);\n\n            const notificationsCount = await BarterOfferNotifcation.count({ user: req.user.id });\n\n            const pageCount = Math.ceil(notificationsCount / limit);\n            let response = new ApiResponse2(notifications, page, pageCount, limit, notificationsCount, req);\n\n            res.send(response);\n        } catch (err) {\n            next(err);\n        }\n    },\n\n\n    async findManyUnseen(req, res, next) {\n\n        await checkUserExist(req.params.id, next);\n        \n\n        let notifications = await BarterOfferNotifcation.find({ user: req.user.id, seen: false }).populate(\"offerUser relatedBarter\")\n            .sort({ creationDate: -1 })\n            .limit(10);\n\n        res.send(notifications);\n    },\n\n    \n    async resetAll(req, res, next) {\n        \n        await checkUserExist(req.params.id, next);\n\n        await BarterOfferNotifcation.update({ user: req.user.id, seen: false }, { seen: true }, { multi: true });\n\n        res.status(204).end();\n    }\n}\n\n"]}