{"version":3,"sources":["../../src/controllers/barter.controller.js"],"names":["validateBarter","req","isUpdate","checkBody","notEmpty","withMessage","custom","value","findById","user","Error","category","optional","isIn","isArray","checkParams","barter","getValidationResult","findAll","res","next","query","page","limit","type","finished","relatedCategory","parseInt","find","populate","sort","creationDate","skip","barters","count","bartersCount","pageCount","Math","ceil","response","addSelfLink","addPrevLink","addNextLink","send","createBarter","validationErrors","isEmpty","mapped","newBarterId","Types","ObjectId","body","imgs","create","_id","createdBarter","id","status","params","NotFound","updateBarter","findByIdAndUpdate","new","updatedBarter","deleteBarter","findByIdAndRemove","deletedBarter"],"mappings":"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","file":"barter.controller.js","sourcesContent":["import Barter from \"../models/barter.model\";\nimport User from \"../models/user.model\";\nimport Category from \"../models/category.model\";\nimport mongoose from \"mongoose\" ;\n\nimport ApiResponse from \"../helpers/ApiResponse\";\nimport ApiError from \"../helpers/ApiError\";\nimport { handleImgs } from \"../utils\";\n\nconst validateBarter = (req, isUpdate = false) => {\n    req.checkBody(\"title\").notEmpty().withMessage(\"titles is Required\")\n    req.checkBody(\"description\").notEmpty().withMessage(\"description is required\");\n    req.checkBody(\"neededProduct\").notEmpty().withMessage(\"neededProduct is required\");\n    req.checkBody(\"relatedUser\").notEmpty().withMessage(\"relatedUser is required\").custom(async value => {\n        const user = await User.findById(value);\n        if(!user) throw new Error(\"User doesn't exist\") \n    }).withMessage('User doesnt exist');\n    req.checkBody(\"relatedCategory\").notEmpty().withMessage(\"relatedCategory is required\").custom(async value => {\n        const category = await Category.findById(value);\n        if (!category) throw new Error(\"Category doesn't exist\")\n    }).withMessage(\"Category doesn't exist\");\n\n    req.checkBody('type').optional().isIn(['TEMP', 'PERM']).withMessage(\"type of barter should be 'TEMP' OR 'PERM'\")\n    req.checkBody('finished').optional().isIn(['true','false']).withMessage(\"finished should be true or false\");\n    req.checkBody('imgs').optional().isArray().withMessage(\"Imgs should be an array of strings 'images 64base'\");\n    \n    if (isUpdate)\n        req.checkParams('id').custom(async value => {\n            let barter = await Barter.findById(value);\n            if (!barter)\n                throw new Error('Barter Not Found');\n        }).withMessage('Barter Not Found');\n\n    return req.getValidationResult();\n}\n\nexport default {\n    async findAll(req, res, next) {\n        let { page, limit , category , type , finished } = req.query;\n        let query = {};\n        \n        if(category)\n            query.relatedCategory = category;\n        if(type)\n            query.type = type;\n        if(finished)\n            query.finished = finished;\n\n        page = page ? parseInt(page) : 1;\n        limit = limit ? parseInt(limit) : 20;\n\n        try { \n            const barters = await Barter.find(query).populate('relatedCategory relatedUser')\n                                .sort({ creationDate: -1 })\n                                .limit(limit)\n                                .skip((page - 1) * limit);\n                                \n            const bartersCount = await Barter.count(query);\n            \n            const pageCount = Math.ceil(bartersCount / limit);\n            let response = new ApiResponse(barters, page, pageCount, limit, bartersCount);\n            response.addSelfLink(req);\n\n            if (page > 1) {\n                response.addPrevLink(req);\n            }\n            if (page < pageCount) {\n                response.addNextLink(req);\n            }\n            res.send(response);\n        }catch(err){\n            next(err);\n        }        \n    },\n\n    async createBarter(req, res, next) {\n        \n        const validationErrors = await validateBarter(req);\n        if (!validationErrors.isEmpty())\n            return next(new ApiError(422, validationErrors.mapped()));\n\n        try {         \n            const newBarterId = mongoose.Types.ObjectId();\n            if (req.body.imgs)\n                req.body.imgs = handleImgs(req.body.imgs, \"barters\", newBarterId , req);\n\n            const createdBarter = await Barter.create({_id: newBarterId , ...req.body});               \n\n            const barter = await Barter.findById(createdBarter.id).populate('relatedCategory relatedUser');\n            \n            res.status(201).send(barter);\n            \n        } catch (err) {\n            next(err);\n        }\n    },\n\n    async findById(req, res, next) {\n        const { id } = req.params;\n        try{\n            const barter = await Barter.findById(id).populate('relatedCategory relatedUser');\n            if (!barter)\n               return next(new ApiError.NotFound('Barter'))        \n            res.send(barter);\n        } catch(err) {\n            next(err);\n        }\n    },\n\n    async updateBarter(req, res, next) {\n\n        const validationErrors = await validateBarter(req, true);\n        if (!validationErrors.isEmpty())\n            return next(new ApiError(422, validationErrors.mapped()));\n        \n        const { id } = req.params;\n            \n        try {\n\n            if (req.body.imgs)\n                req.body.imgs = handleImgs(req.body.imgs, \"barters\", id , req);\n            \n            const updatedBarter = await Barter.findByIdAndUpdate(id, req.body, { new: true }).populate('relatedCategory relatedUser');\n\n            res.status(200).send(updatedBarter);\n        }\n        catch (err) {\n            next(err)\n        }\n    },\n\n\n    async deleteBarter(req, res, next) {\n        const { id } = req.params;\n        try {\n            const deletedBarter = await Barter.findByIdAndRemove(id);\n            if (!deletedBarter)\n                return next(new ApiError.NotFound('Barter'));\n            res.status(204).send();\n        }\n        catch (err) {\n            next(err);\n        }\n    }\n}"]}