{"version":3,"sources":["../../src/controllers/barter.controller.js"],"names":["validateBarter","req","checkBody","notEmpty","withMessage","custom","value","findById","user","Error","category","optional","isIn","isArray","getValidationResult","findAll","res","next","query","page","limit","type","finished","relatedCategory","parseInt","find","populate","sort","creationDate","skip","barters","count","bartersCount","pageCount","Math","ceil","response","addSelfLink","addPrevLink","addNextLink","send","handleBarterImgs","imgs","imgsUrls","i","length","push","Types","ObjectId","createBarter","validationErrors","isEmpty","mapped","body","create","createdBarter","id","save","barter","status","params","NotFound","updateBarter","findByIdAndUpdate","new","updatedBarter","deleteBarter","findByIdAndRemove","deletedBarter"],"mappings":"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","file":"barter.controller.js","sourcesContent":["import Barter from \"../models/barter.model\";\nimport User from \"../models/user.model\";\nimport Category from \"../models/category.model\";\n\nimport ApiResponse from \"../helpers/ApiResponse\";\nimport ApiError from \"../helpers/ApiError\";\nimport mongoose from \"mongoose\" ;\nimport { writeBase64AndReturnUrl } from \"../utils\";\n\nconst validateBarter = req => {\n    req.checkBody(\"title\").notEmpty().withMessage(\"titles is Required\")\n    req.checkBody(\"description\").notEmpty().withMessage(\"description is required\");\n    req.checkBody(\"neededProduct\").notEmpty().withMessage(\"neededProduct is required\");\n    req.checkBody(\"relatedUser\").notEmpty().withMessage(\"relatedUser is required\").custom(async value => {\n        const user = await User.findById(value);\n        if(!user) throw new Error(\"User doesn't exist\") \n    }).withMessage('User doesnt exist');\n    req.checkBody(\"relatedCategory\").notEmpty().withMessage(\"relatedCategory is required\").custom(async value => {\n        const category = await Category.findById(value);\n        if (!category) throw new Error(\"Category doesn't exist\")\n    }).withMessage(\"Category doesn't exist\");\n\n    req.checkBody('type').optional().isIn(['TEMP', 'PERM']).withMessage(\"type of barter should be 'TEMP' OR 'PERM'\")\n    req.checkBody('finished').optional().isIn(['true','false']).withMessage(\"finished should be true or false\");\n    req.checkBody('imgs').optional().isArray().withMessage(\"Imgs should be an array of strings 'images 64base'\");\n    return req.getValidationResult();\n}\n\nexport default {\n    async findAll(req, res, next) {\n        let { page, limit , category , type , finished } = req.query;\n        let query = {};\n        \n        if(category)\n            query.relatedCategory = category;\n        if(type)\n            query.type = type;\n        if(finished)\n            query.finished = finished;\n\n        page = page ? parseInt(page) : 1;\n        limit = limit ? parseInt(limit) : 20;\n\n        try { \n            const barters = await Barter.find(query).populate('relatedCategory relatedUser')\n                                .sort({ creationDate: -1 })\n                                .limit(limit)\n                                .skip((page - 1) * limit);\n                                \n            const bartersCount = await Barter.count(query);\n            \n            const pageCount = Math.ceil(bartersCount / limit);\n            let response = new ApiResponse(barters, page, pageCount, limit, bartersCount);\n            response.addSelfLink(req);\n\n            if (page > 1) {\n                response.addPrevLink(req);\n            }\n            if (page < pageCount) {\n                response.addNextLink(req);\n            }\n            res.send(response);\n        }catch(err){\n            next(err);\n        }        \n    },\n\n    handleBarterImgs(imgs) {\n        let imgsUrls;\n        for (let i = 0; i < imgs.length; i++) {\n            imgsUrls.push(writeBase64AndReturnUrl(imgs[i], \"barters/\"+ mongoose.Types.ObjectId() + i, req));\n        }\n        return imgsUrls\n    },\n\n    async createBarter(req, res, next) {\n        \n        const validationErrors = await validateBarter(req);\n        if (!validationErrors.isEmpty())\n            return next(new ApiError(422, validationErrors.mapped()));\n\n        try {\n            let imgs = req.body.imgs;\n            delete req.body.imgs;\n         \n            const createdBarter = await Barter.create(req.body);               \n            // handle barter imgs\n            if (imgs) {\n                for (let i = 0; i < imgs.length; i++) {\n                    createdBarter.imgs.push(writeBase64AndReturnUrl(imgs[i], \"barters/\"+ createdBarter.id + i, req));\n                }\n            }\n            await createdBarter.save();\n                                    \n            const barter = await Barter.findById(createdBarter.id).populate('relatedCategory relatedUser');\n            \n            res.status(201).send(barter);\n            \n        } catch (err) {\n            next(err);\n        }\n    },\n\n    async findById(req, res, next) {\n        const { id } = req.params;\n        try{\n            const barter = await Barter.findById(id).populate('relatedCategory relatedUser');\n            if (!barter)\n               return next(new ApiError.NotFound('Barter'))        \n            res.send(barter);\n        } catch(err) {\n            next(err);\n        }\n    },\n\n    async updateBarter(req, res, next) {\n        const { id } = req.params;\n\n        const validationErrors = await validateBarter(req);\n        if (!validationErrors.isEmpty())\n            return next(new ApiError(422, validationErrors.mapped()));\n\n        try {\n            let imgs = req.body.imgs;\n            delete req.body.imgs;\n            \n            const updatedBarter = await Barter.findByIdAndUpdate(id, req.body, { new: true }).populate('relatedCategory relatedUser');\n            if (!updatedBarter)\n                return next(new ApiError.NotFound('Barter'));\n\n            // handle barter imgs\n            if(imgs) {\n                for (let i = 0; i < imgs.length; i++) {\n                    updatedBarter.imgs.push(writeBase64AndReturnUrl(imgs[i], \"barters/\"+  updatedBarter.id + i, req));\n                }\n            }\n            res.status(200).send(updatedBarter);\n        }\n        catch (err) {\n            next(err)\n        }\n    },\n\n\n    async deleteBarter(req, res, next) {\n        const { id } = req.params;\n        try {\n            const deletedBarter = await Barter.findByIdAndRemove(id);\n            if (!deletedBarter)\n                return next(new ApiError.NotFound('Barter'));\n            res.status(204).send();\n        }\n        catch (err) {\n            next(err);\n        }\n    }\n}"]}