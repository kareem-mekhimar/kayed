{"version":3,"sources":["../../src/controllers/barter.controller.js"],"names":["validateBarter","req","checkBody","notEmpty","withMessage","custom","value","findById","user","Error","category","optional","isIn","getValidationResult","findAll","res","next","query","page","limit","type","finished","relatedCategory","parseInt","find","populate","sort","creationDate","skip","barters","count","bartersCount","pageCount","Math","ceil","response","addSelfLink","addPrevLink","addNextLink","send","BadRequest","createBarter","validationErrors","isEmpty","mapped","imgs","body","create","createdBarter","i","length","push","id","barter","save","status","params","NotFound","updateBarter","findByIdAndUpdate","new","updatedBarter","deleteBarter","findByIdAndRemove","deletedBarter"],"mappings":"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","file":"barter.controller.js","sourcesContent":["import Barter from \"../models/barter.model\";\nimport User from \"../models/user.model\";\nimport Category from \"../models/category.model\";\n\nimport ApiResponse from \"../helpers/ApiResponse\";\nimport ApiError from \"../helpers/ApiError\";\nimport { writeBase64AndReturnUrl } from \"../utils\";\n\nconst validateBarter = req => {\n    req.checkBody(\"title\").notEmpty().withMessage(\"titles is Required\")\n    req.checkBody(\"description\").notEmpty().withMessage(\"description is required\");\n    req.checkBody(\"neededProduct\").notEmpty().withMessage(\"neededProduct is required\");\n    req.checkBody(\"relatedUser\").notEmpty().withMessage(\"relatedUser is required\").custom(async value => {\n        const user = await User.findById(value);\n        if(!user) throw new Error('User doesnt exist') \n    }).withMessage('User doesnt exist');\n    req.checkBody(\"relatedCategory\").notEmpty().withMessage(\"relatedCategory is required\").custom(async value => {\n        const category = await Category.findById(value);\n        if (!category) throw new Error('Category doesnt exist')\n    }).withMessage('Category doesnt exist');\n\n    req.checkBody('type').optional().isIn(['TEMP', 'PERM']).withMessage(\"type of barter should be 'TEMP' OR 'PERM'\")\n    req.checkBody('finished').optional().isIn(['true','false']).withMessage(\"finished should be true or false\");\n    // req.checkBody('imgs').optional()\n    // .custom(value => {\n    //     if(!Array.isArray(value))\n    //         throw new Error('imgs should be array')\n    // })\n    return req.getValidationResult();\n}\n\nexport default {\n    async findAll(req, res, next) {\n        let { page, limit , category , type , finished } = req.query;\n        let query = {};\n        \n        if(category)\n            query.relatedCategory = category;\n        if(type)\n            query.type = type;\n        if(finished)\n            query.finished = finished;\n\n        page = page ? parseInt(page) : 1;\n        limit = limit ? parseInt(limit) : 20;\n\n        try { \n            const barters = await Barter.find(query).populate('relatedCategory relatedUser')\n                                .sort({ creationDate: -1 })\n                                .limit(limit)\n                                .skip((page - 1) * limit);\n                \n            const bartersCount = await Barter.count();\n            \n            const pageCount = Math.ceil(bartersCount / limit);\n            let response = new ApiResponse(barters, page, pageCount, limit, bartersCount);\n            response.addSelfLink(req);\n\n            if (page > 1) {\n                response.addPrevLink(req);\n            }\n            if (page < pageCount) {\n                response.addNextLink(req);\n            }\n            res.send(response);\n        }catch(err){\n           next(new ApiError.BadRequest());\n            // next(err);\n        }\n        \n    },\n\n\n    async createBarter(req, res, next) {\n        \n        const validationErrors = await validateBarter(req);\n        if (!validationErrors.isEmpty())\n            next(new ApiError(422, validationErrors.mapped()));\n\n        try {\n            let imgs = req.body.imgs;\n            delete req.body.imgs;\n\n            const createdBarter = await Barter.create(req.body);\n\n            // handle barter imgs\n            if (imgs) {\n                for (let i = 0; i < imgs.length; i++) {\n                    createdBarter.imgs.push(writeBase64AndReturnUrl(imgs[i], createdBarter.id + i, req));\n                }\n            }\n            \n            const barter = await Barter.findById(createdBarter.id).populate('relatedCategory relatedUser');\n            createdBarter.save();\n            \n            res.status(201).send(barter);\n            \n        }\n        catch (err) {\n            next(new ApiError.BadRequest());\n            //next(err);\n        }\n    },\n\n    async findById(req, res, next) {\n        const { id } = req.params;\n        try{\n            const barter = await Barter.findById(id).populate('relatedCategory relatedUser');\n            if (barter)\n                res.send(barter);\n            else \n                next(new ApiError.NotFound('Barter'))\n        } catch(err) {\n            next(new ApiError.BadRequest());\n            //next(err);\n        }\n    },\n\n    async updateBarter(req, res, next) {\n        const { id } = req.params;\n\n        const validationErrors = await validateBarter(req);\n        if (!validationErrors.isEmpty())\n            next(new ApiError(422, validationErrors.mapped()));\n\n        try {\n            let imgs = req.body.imgs;\n            delete req.body.imgs;\n            \n            const updatedBarter = await Barter.findByIdAndUpdate(id, req.body, { new: true }).populate('relatedCategory relatedUser');\n            if (!updatedBarter)\n                next(new ApiError.NotFound('Barter'));\n\n            // handle barter imgs\n            if(imgs) {\n                for (let i = 0; i < imgs.length; i++) {\n                    updatedBarter.imgs.push(writeBase64AndReturnUrl(imgs[i], updatedBarter.id + i, req));\n                }\n            }\n            res.status(200).send(updatedBarter);\n        }\n        catch (err) {\n            next(new ApiError.BadRequest());\n        }\n    },\n\n\n    async deleteBarter(req, res, next) {\n        const { id } = req.params;\n        try {\n            const deletedBarter = await Barter.findByIdAndRemove(id);\n            if (deletedBarter)\n                res.status(204).send();\n            next(new ApiError.NotFound('Barter'));\n        }\n        catch (err) {\n            next(new ApiError.BadRequest());\n            //next(err);\n        }\n    }\n}"]}