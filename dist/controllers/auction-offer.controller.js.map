{"version":3,"sources":["../../src/controllers/auction-offer.controller.js"],"names":["validateAuctionOfferBody","req","highestPrice","checkBody","notEmpty","withMessage","custom","findById","value","then","user","Error","matches","getValidationResult","create","res","next","auctionId","params","auction","result","isEmpty","mapped","body","relatedAuction","offer","price","save","id","populate","status","send"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAIA,IAAMA,2BAA2B,SAA3BA,wBAA2B,CAACC,GAAD,EAAMC,YAAN,EAAuB;AACpDD,QAAIE,SAAJ,CAAc,QAAd,EAAwBC,QAAxB,GAAmCC,WAAnC,CAA+C,iBAA/C,EACKC,MADL,CACY,iBAAS;AACb,eAAO,eAAKC,QAAL,CAAcC,KAAd,EAAqBC,IAArB,CAA0B,gBAAQ;AACrC,gBAAI,CAACC,IAAL,EACI,MAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACP,SAHM,CAAP;AAIH,KANL,EAMON,WANP,CAMmB,mCANnB;;AAQAJ,QAAIE,SAAJ,CAAc,OAAd,EACKC,QADL,GACgBC,WADhB,CAC4B,gBAD5B,EAEKO,OAFL,CAEa,IAFb,EAEmBP,WAFnB,CAE+B,gBAF/B,EAGKC,MAHL,CAGY;AAAA,eAASJ,eAAeM,KAAxB;AAAA,KAHZ,EAG2CH,WAH3C,CAGuD,uCAHvD;;AAKA,WAAOJ,IAAIY,mBAAJ,EAAP;AAEH,CAhBD;;kBAmBe;AAELC,UAFK,kBAEEb,GAFF,EAEOc,GAFP,EAEYC,IAFZ,EAEkB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAErBC,qCAFqB,GAEThB,IAAIiB,MAAJ,CAAWD,SAFF;AAAA;AAAA,mCAIL,kBAAQV,QAAR,CAAiBU,SAAjB,CAJK;;AAAA;AAIrBE,mCAJqB;;AAAA,gCAKpBA,OALoB;AAAA;AAAA;AAAA;;AAMrBH,iCAAK,uBAAa,GAAb,EAAkB,mBAAlB,CAAL;;AANqB;AAAA;;AAAA;AAAA;AAAA,mCAUFhB,yBAAyBC,GAAzB,EAA8BkB,QAAQjB,YAAtC,CAVE;;AAAA;AAUjBkB,kCAViB;;AAAA,gCAYhBA,OAAOC,OAAP,EAZgB;AAAA;AAAA;AAAA;;AAajBL,iCAAK,uBAAa,GAAb,EAAkBI,OAAOE,MAAP,EAAlB,CAAL;AAbiB;AAAA;;AAAA;AAejBrB,gCAAIsB,IAAJ,CAASC,cAAT,GAA0BP,SAA1B;AAfiB;AAAA,mCAgBC,uBAAaH,MAAb,CAAoBb,IAAIsB,IAAxB,CAhBD;;AAAA;AAgBbE,iCAhBa;;;AAkBjBN,oCAAQjB,YAAR,GAAuBuB,MAAMC,KAA7B;AACAP,oCAAQQ,IAAR;;AAnBiB;AAAA,mCAqBH,uBAAapB,QAAb,CAAsBkB,MAAMG,EAA5B,EAAgCC,QAAhC,CAAyC,uBAAzC,CArBG;;AAAA;AAqBjBJ,iCArBiB;;AAsBjBV,gCAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBN,KAArB;;AAtBiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0B5B;AA5BU,C","file":"auction-offer.controller.js","sourcesContent":["import AuctionOffer from \"../models/auction-offer.model\";\nimport User from \"../models/user.model\";\nimport ApiResponse from \"../helpers/ApiResponse\";\nimport ApiError from \"../helpers/ApiError\";\nimport Auction from \"../models/auction.model\";\n\n\n\nconst validateAuctionOfferBody = (req, highestPrice) => {\n    req.checkBody(\"bidder\").notEmpty().withMessage(\"bidder Required\")\n        .custom(value => {\n            return User.findById(value).then(user => {\n                if (!user)\n                    throw new Error(\"bidder user Is Not Found\");\n            })\n        }).withMessage(\"bidder is Not Found in the system\");\n\n    req.checkBody(\"price\")\n        .notEmpty().withMessage(\"price required\")\n        .matches(/\\d/).withMessage(\"Invalid Number\")\n        .custom(value => highestPrice < value).withMessage(\"price must be more than highest price\");\n\n    return req.getValidationResult();\n\n};\n\n\nexport default {\n\n    async create(req, res, next) {\n\n        let auctionId = req.params.auctionId;\n\n        let auction = await Auction.findById(auctionId);\n        if (!auction)\n            next(new ApiError(404, \"Auction Not Found\"));\n\n        else {\n\n            let result = await validateAuctionOfferBody(req, auction.highestPrice);\n\n            if (!result.isEmpty())\n                next(new ApiError(422, result.mapped()));\n            else {\n                req.body.relatedAuction = auctionId;\n                let offer = await AuctionOffer.create(req.body);\n\n                auction.highestPrice = offer.price;\n                auction.save();\n\n                offer = await AuctionOffer.findById(offer.id).populate(\"bidder relatedAuction\");\n                res.status(201).send(offer);\n            }\n        }\n\n    },\n\n}"]}