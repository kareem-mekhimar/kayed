{"version":3,"sources":["../../src/controllers/category.controller.js"],"names":["validateCategory","req","checkBody","notEmpty","withMessage","custom","value","findOne","name","category","Error","getValidationResult","findAll","res","next","find","allCategories","status","send","createCategory","validationErrors","isEmpty","mapped","create","body","createdCategory","save","console","log","updateCategory","id","params","findByIdAndUpdate","new","updatedCategory","deleteCategory","findByIdAndRemove","deletedCategory"],"mappings":"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","file":"category.controller.js","sourcesContent":["import Category from \"../models/category.model\";\nimport ApiResponse from \"../helpers/ApiResponse\";\nimport ApiError from \"../helpers/ApiError\";\n\nconst validateCategory = req => {\n    req.checkBody(\"name\")\n        .notEmpty().withMessage(\"category's name is required\")\n        .custom(async value => {\n            const category = await Category.findOne({ name: value });\n            if (category) throw new Error();\n        }).withMessage(\"this category name already exists\");\n    return req.getValidationResult();\n}\n\nexport default {\n    async findAll(req, res, next) {\n        try {\n            const allCategories = await Category.find({});\n            if (!allCategories)\n                next(new ApiError('404', 'No Categories are found'));\n            res.status(200).send(allCategories);\n        }\n        catch (err) {\n            next(err);\n        }\n    },\n\n    async createCategory(req, res, next) {\n\n        const validationErrors = await validateCategory(req);\n        if (!validationErrors.isEmpty())\n            next(new ApiError(422, validationErrors.mapped()));\n\n        try {\n            const createdCategory = await Category.create(req.body);\n            createdCategory.save();\n            res.status(201).send(createdCategory);\n        }\n        catch (err) {\n            next(new ApiError(400, 'Invalid Inputs.'));\n            console.log(err);\n        }\n    },\n\n    async updateCategory(req, res, next) {\n        const { id } = req.params;\n\n        const validationErrors = await validateCategory(req);\n        if (!validationErrors.isEmpty())\n            next(new ApiError(422, validationErrors.mapped()));\n\n        try {\n            const updatedCategory = await Category.findByIdAndUpdate(id, req.body, { new: true });\n            if (!updatedCategory)\n                next(new ApiError(404, 'Category Not Found !'));\n\n            res.status(200).send(updatedCategory);\n        }\n        catch (err) {\n            next(err);\n        }\n    },\n\n    async deleteCategory(req, res, next) {\n        const { id } = req.params;\n        try {\n            const deletedCategory = await Category.findByIdAndRemove(id);\n            if (deletedCategory)\n                res.status(204).send();\n            next(new ApiError(404, 'Category Not Found !'));\n        }\n        catch (err) {\n            next(err);\n        }\n    }\n}"]}