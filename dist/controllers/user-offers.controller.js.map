{"version":3,"sources":["../../src/controllers/user-offers.controller.js"],"names":["checkIfUserExist","id","next","findById","user","NotFound","getUserBartersInMyOffers","req","res","params","query","page","limit","status","parseInt","find","offerUsers","populate","sort","creationDate","skip","userBartersInMyOffers","count","userBartersInMyOffersCount","userBarters","pageCount","Math","ceil","userBartersCount","response","addSelfLink","addPrevLink","addNextLink","send"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA;AAAA,uEAAmB,iBAAOC,EAAP,EAAWC,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACF,eAAKC,QAAL,CAAcF,EAAd,CADE;;AAAA;AACfG,4BADe;;AAAA,4BAEjBA,IAFiB;AAAA;AAAA;AAAA;;AAAA,yDAGVF,KAAK,IAAI,mBAASG,QAAb,CAAsB,MAAtB,CAAL,CAHU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAnB;;AAAA;AAAA;AAAA;AAAA,GAAN;;kBAMe;AAELC,4BAFK,oCAEoBC,GAFpB,EAEyBC,GAFzB,EAE8BN,IAF9B,EAEoC;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACrCD,8BADqC,GAC9BM,IAAIE,MAD0B,CACrCR,EADqC;;AAE3CD,6CAAiBC,EAAjB,EAAqBC,IAArB;;AAF2C,yCAIbK,IAAIG,KAJS,EAIrCC,IAJqC,cAIrCA,IAJqC,EAI/BC,KAJ+B,cAI/BA,KAJ+B,EAIxBC,MAJwB,cAIxBA,MAJwB;;;AAM3CF,mCAAOA,OAAOG,SAASH,IAAT,CAAP,GAAwB,CAA/B;AACAC,oCAAQA,QAAQE,SAASF,KAAT,CAAR,GAA0B,EAAlC;;AAP2C;AAAA;AAAA,mCAUL,iBAAOG,IAAP,CAAY,EAAEC,YAAYf,EAAd,EAAZ,EAAgCgB,QAAhC,CAAyC,6BAAzC,EACbC,IADa,CACR,EAAEC,cAAc,CAAC,CAAjB,EADQ,EAEbP,KAFa,CAEPA,KAFO,EAGbQ,IAHa,CAGR,CAACT,OAAO,CAAR,IAAaC,KAHL,CAVK;;AAAA;AAUnCS,iDAVmC;AAAA;AAAA,mCAeE,iBAAOC,KAAP,CAAa,EAAEN,YAAYf,EAAd,EAAb,CAfF;;AAAA;AAejCsB,sDAfiC;;;AAiBvCC,0CAAc,sDAA4BA,WAA5B,EAAyCjB,GAAzC,CAAd;;AAEMkB,qCAnBiC,GAmBrBC,KAAKC,IAAL,CAAUC,mBAAmBhB,KAA7B,CAnBqB;AAoBnCiB,oCApBmC,GAoBxB,0BAAgBL,WAAhB,EAA6Bb,IAA7B,EAAmCc,SAAnC,EAA8Cb,KAA9C,EAAqDgB,gBAArD,CApBwB;;AAqBvCC,qCAASC,WAAT,CAAqBvB,GAArB;;AAEA,gCAAII,OAAO,CAAX,EAAc;AACVkB,yCAASE,WAAT,CAAqBxB,GAArB;AACH;AACD,gCAAII,OAAOc,SAAX,EAAsB;AAClBI,yCAASG,WAAT,CAAqBzB,GAArB;AACH;AACDC,gCAAIyB,IAAJ,CAASJ,QAAT;AA7BuC;AAAA;;AAAA;AAAA;AAAA;;AA+BvC3B;;AA/BuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiC9C;AAnCU,C","file":"user-offers.controller.js","sourcesContent":["import User from \"../models/user.model\";\nimport Barter from \"../models/barter.model\";\nimport Auction from \"../models/auction.model\";\nimport ApiResponse from \"../helpers/ApiResponse\";\nimport ApiError from \"../helpers/ApiError\";\nimport { isInAll_MyOffers_favourites, isIn_MyOffers_favourites } from \"../helpers/Barter&AuctionHelper\";\n\nconst checkIfUserExist = async (id, next) => {\n    const user = await User.findById(id);\n    if(!user)\n        return next(new ApiError.NotFound('User'));\n}\n\nexport default {\n\n    async getUserBartersInMyOffers(req, res, next) {\n        let { id } = req.params;\n        checkIfUserExist(id, next);\n\n        let { page, limit, status } = req.query;\n        \n        page = page ? parseInt(page) : 1;\n        limit = limit ? parseInt(limit) : 20;\n\n        try {\n            let userBartersInMyOffers = await Barter.find({ offerUsers: id }).populate('relatedCategory relatedUser')\n                                .sort({ creationDate: -1 })\n                                .limit(limit)\n                                .skip((page - 1) * limit);\n            \n            const userBartersInMyOffersCount = await Barter.count({ offerUsers: id });\n            \n            userBarters = isInAll_MyOffers_favourites(userBarters, req);\n\n            const pageCount = Math.ceil(userBartersCount / limit);\n            let response = new ApiResponse(userBarters, page, pageCount, limit, userBartersCount);\n            response.addSelfLink(req);\n\n            if (page > 1) {\n                response.addPrevLink(req);\n            }\n            if (page < pageCount) {\n                response.addNextLink(req);\n            }\n            res.send(response);\n        } catch(err){\n            next(err);\n        }\n    }\n}    "]}