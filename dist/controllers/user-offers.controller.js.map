{"version":3,"sources":["../../src/controllers/user-offers.controller.js"],"names":["checkIfUserExist","id","next","findById","user","NotFound","getUserBartersInMyOffers","req","res","params","query","relatedUser","page","limit","status","includes","parseInt","find","populate","path","model","sort","creationDate","skip","userBartersOffers","count","userBartersInMyOffersCount","parentBarters","prevItem","userBarterOffer","relatedBarter","push","reverse","parentBarter","inMyOffers","MyOfferId","pageCount","Math","ceil","response","addSelfLink","addPrevLink","addNextLink","send","getUserAuctionsInMyOffers","finished","offerUsers","auctionsWithMyOffer","auctionsWithMyOfferCount","getUserWinnedAuctions","winned","bidder","select","winnedAuctionsOffers","winnedAuctionsOffersCount","parentAuctions","winnedAuctionOffer","relatedAuction"],"mappings":"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","file":"user-offers.controller.js","sourcesContent":["import User from \"../models/user.model\";\nimport Barter from \"../models/barter.model\";\nimport Auction from \"../models/auction.model\";\nimport ApiResponse from \"../helpers/ApiResponse\";\nimport ApiError from \"../helpers/ApiError\";\nimport BarterOffer from \"../models/barter-offer.model\"; \nimport AuctionOffer from \"../models/auction-offer.model\";\nimport mongoose from 'mongoose';\nimport { isInAll_MyOffers_favourites, isIn_MyOffers_favourites } from \"../helpers/Barter&AuctionHelper\";\n\nconst checkIfUserExist = async (id, next) => {\n    const user = await User.findById(id);\n    if(!user)\n        return next(new ApiError.NotFound('User'));\n}\n\nexport default {\n\n    async getUserBartersInMyOffers(req, res, next) {\n        let { id } = req.params;\n        checkIfUserExist(id, next);\n\n        let query = {\n            relatedUser: req.user.id\n        };\n\n        let { page, limit, status } = req.query;\n        \n        if(status && ['PENDING','ACCEPTED','REJECTED','DONE'].includes(status))\n            query.status = status;   \n        \n        page = page ? parseInt(page) : 1;\n        limit = limit ? parseInt(limit) : 20;\n\n        try {\n            let userBartersOffers = await BarterOffer.find(query).populate({\n                path: 'relatedBarter',\n                model: 'barter',\n                populate: {\n                  path: 'relatedUser relatedCategory barterOffer'\n                }\n            })\n            .sort({ creationDate: -1 })\n            .limit(limit)\n            .skip((page - 1) * limit);\n\n            let userBartersInMyOffersCount = await BarterOffer.count(query);\n\n            let parentBarters = [];\n            let prevItem;\n            for(let userBarterOffer of userBartersOffers)\n            {\n                if(prevItem && prevItem.relatedBarter.id  == userBarterOffer.relatedBarter.id) { \n                    userBartersInMyOffersCount--;\n                    continue;\n                }\n                prevItem = userBarterOffer\n                parentBarters.push(userBarterOffer.relatedBarter);\n            }   \n\n            parentBarters = isInAll_MyOffers_favourites(parentBarters.reverse(), req);\n            \n            for(let userBarterOffer of userBartersOffers){ \n                for(let parentBarter of parentBarters) {\n                    if(userBarterOffer.relatedBarter.id == parentBarter.id && parentBarter.inMyOffers == true)\n                        parentBarter.MyOfferId = userBarterOffer.id;\n                }\n            }\n            \n            const pageCount = Math.ceil(userBartersInMyOffersCount / limit);\n            let response = new ApiResponse(parentBarters, page, pageCount, limit, userBartersInMyOffersCount);\n            response.addSelfLink(req);\n\n            if (page > 1) {\n                response.addPrevLink(req);\n            }\n            if (page < pageCount) {\n                response.addNextLink(req);\n            }\n            res.send(response);\n        } catch(err){\n            next(err);\n        }\n    },\n\n    async getUserAuctionsInMyOffers(req, res, next) {\n        let { id } = req.params;\n        checkIfUserExist(id, next);\n        let { page, limit, finished } = req.query;\n        let query = {\n            offerUsers: req.user.id\n        };\n        \n        if(finished)\n            query.finished = finished\n        page = page ? parseInt(page) : 1;\n        limit = limit ? parseInt(limit) : 20;\n\n        try {\n            let auctionsWithMyOffer = await Auction.find(query).populate('relatedUser relatedCategory auctionOffer')\n                                        .sort({ creationDate: -1 })\n                                        .limit(limit)\n                                        .skip((page - 1) * limit);\n\n            \n            const auctionsWithMyOfferCount = await Auction.count(query);\n\n            auctionsWithMyOffer = isInAll_MyOffers_favourites(auctionsWithMyOffer, req, false);\n            \n            const pageCount = Math.ceil(auctionsWithMyOfferCount / limit);\n            let response = new ApiResponse(auctionsWithMyOffer, page, pageCount, limit, auctionsWithMyOfferCount);\n            response.addSelfLink(req);\n\n            if (page > 1) {\n                response.addPrevLink(req);\n            }\n            if (page < pageCount) {\n                response.addNextLink(req);\n            }\n            res.send(response);\n        } catch(err){\n            next(err);\n        }\n    },\n\n    async getUserWinnedAuctions(req, res, next) {\n        let { id } = req.params;\n        checkIfUserExist(id, next);\n\n        let { page, limit } = req.query;\n        \n        page = page ? parseInt(page) : 1;\n        limit = limit ? parseInt(limit) : 20;\n\n        try {\n            let winnedAuctionsOffers = await AuctionOffer.find({ winned: true , bidder: req.user.id })\n            .select('relatedAuction').populate({\n                path: 'relatedAuction',\n                model: 'auction',\n                populate: {\n                  path: 'relatedUser relatedCategory auctionOffer'\n                }\n            })\n            .sort({ creationDate: -1 })\n            .limit(limit)\n            .skip((page - 1) * limit);\n            \n            const winnedAuctionsOffersCount = await AuctionOffer.count({ winned: true , bidder: req.user.id });\n                        \n            let parentAuctions = [];\n            for(let winnedAuctionOffer of winnedAuctionsOffers)\n                parentAuctions.push(winnedAuctionOffer.relatedAuction);\n\n            parentAuctions = isInAll_MyOffers_favourites(parentAuctions.reverse(), req, false);\n            \n            const pageCount = Math.ceil(winnedAuctionsOffersCount / limit);\n            let response = new ApiResponse(parentAuctions, page, pageCount, limit, winnedAuctionsOffersCount);\n            response.addSelfLink(req);\n\n            if (page > 1) {\n                response.addPrevLink(req);\n            }\n            if (page < pageCount) {\n                response.addNextLink(req);\n            }\n            res.send(response);\n        } catch(err){\n            next(err);\n        }\n    }\n}    "]}