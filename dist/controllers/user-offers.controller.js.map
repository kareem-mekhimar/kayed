{"version":3,"sources":["../../src/controllers/user-offers.controller.js"],"names":["checkIfUserExist","id","next","findById","user","NotFound","getUserBartersInMyOffers","req","res","params","query","relatedUser","page","limit","status","includes","parseInt","find","select","populate","path","model","sort","creationDate","skip","userBartersOffers","count","userBartersInMyOffersCount","parentBarters","prevItem","userBarterOffer","relatedBarter","push","reverse","pageCount","Math","ceil","response","addSelfLink","addPrevLink","addNextLink","send","getUserAuctionsInMyOffers","finished","offerUsers","auctionsWithMyOffer","auctionsWithMyOfferCount","getUserWinnedAuctions","winned","bidder","winnedAuctionsOffers","winnedAuctionsOffersCount","parentAuctions","winnedAuctionOffer","relatedAuction"],"mappings":"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","file":"user-offers.controller.js","sourcesContent":["import User from \"../models/user.model\";\nimport Barter from \"../models/barter.model\";\nimport Auction from \"../models/auction.model\";\nimport ApiResponse from \"../helpers/ApiResponse\";\nimport ApiError from \"../helpers/ApiError\";\nimport BarterOffer from \"../models/barter-offer.model\"; \nimport AuctionOffer from \"../models/auction-offer.model\";\nimport mongoose from 'mongoose';\nimport { isInAll_MyOffers_favourites, isIn_MyOffers_favourites } from \"../helpers/Barter&AuctionHelper\";\n\nconst checkIfUserExist = async (id, next) => {\n    const user = await User.findById(id);\n    if(!user)\n        return next(new ApiError.NotFound('User'));\n}\n\nexport default {\n\n    async getUserBartersInMyOffers(req, res, next) {\n        let { id } = req.params;\n        checkIfUserExist(id, next);\n\n        let query = {\n            relatedUser: req.user.id\n        };\n\n        let { page, limit, status } = req.query;\n        \n        if(status && ['PENDING','ACCEPTED','REJECTED','DONE'].includes(status))\n            query.status = status;   \n        \n        page = page ? parseInt(page) : 1;\n        limit = limit ? parseInt(limit) : 20;\n\n        try {\n            let userBartersOffers = await BarterOffer.find(query).select('relatedBarter').populate({\n                path: 'relatedBarter',\n                model: 'barter',\n                populate: {\n                  path: 'relatedUser relatedCategory barterOffer'\n                }\n            })\n            .sort({ creationDate: -1 })\n            .limit(limit)\n            .skip((page - 1) * limit);\n\n            let userBartersInMyOffersCount = await BarterOffer.count(query);\n\n            let parentBarters = [];\n            let prevItem;\n            for(let userBarterOffer of userBartersOffers)\n            {\n                if(prevItem && prevItem.relatedBarter.id  == userBarterOffer.relatedBarter.id) { \n                    userBartersInMyOffersCount--;\n                    continue;\n                }\n                prevItem = userBarterOffer\n                parentBarters.push(userBarterOffer.relatedBarter);\n            }   \n\n            parentBarters = isInAll_MyOffers_favourites(parentBarters.reverse(), req);\n            \n            const pageCount = Math.ceil(userBartersInMyOffersCount / limit);\n            let response = new ApiResponse(parentBarters, page, pageCount, limit, userBartersInMyOffersCount);\n            response.addSelfLink(req);\n\n            if (page > 1) {\n                response.addPrevLink(req);\n            }\n            if (page < pageCount) {\n                response.addNextLink(req);\n            }\n            res.send(response);\n        } catch(err){\n            next(err);\n        }\n    },\n\n    async getUserAuctionsInMyOffers(req, res, next) {\n        let { id } = req.params;\n        checkIfUserExist(id, next);\n        let { page, limit, finished } = req.query;\n        let query = {\n            offerUsers: req.user.id\n        };\n        \n        if(finished)\n            query.finished = finished\n        page = page ? parseInt(page) : 1;\n        limit = limit ? parseInt(limit) : 20;\n\n        try {\n            let auctionsWithMyOffer = await Auction.find(query).populate('relatedUser relatedCategory auctionOffer')\n                                        .sort({ creationDate: -1 })\n                                        .limit(limit)\n                                        .skip((page - 1) * limit);\n\n            const auctionsWithMyOfferCount = await Auction.count(query);\n\n            auctionsWithMyOffer = isInAll_MyOffers_favourites(auctionsWithMyOffer, req, false);\n            \n            const pageCount = Math.ceil(auctionsWithMyOfferCount / limit);\n            let response = new ApiResponse(auctionsWithMyOffer, page, pageCount, limit, auctionsWithMyOfferCount);\n            response.addSelfLink(req);\n\n            if (page > 1) {\n                response.addPrevLink(req);\n            }\n            if (page < pageCount) {\n                response.addNextLink(req);\n            }\n            res.send(response);\n        } catch(err){\n            next(err);\n        }\n    },\n\n    async getUserWinnedAuctions(req, res, next) {\n        let { id } = req.params;\n        checkIfUserExist(id, next);\n\n        let { page, limit } = req.query;\n        \n        page = page ? parseInt(page) : 1;\n        limit = limit ? parseInt(limit) : 20;\n\n        try {\n            let winnedAuctionsOffers = await AuctionOffer.find({ winned: true , bidder: req.user.id })\n            .select('relatedAuction').populate({\n                path: 'relatedAuction',\n                model: 'auction',\n                populate: {\n                  path: 'relatedUser relatedCategory auctionOffer'\n                }\n            })\n            .sort({ creationDate: -1 })\n            .limit(limit)\n            .skip((page - 1) * limit);\n            \n            const winnedAuctionsOffersCount = await AuctionOffer.count({ winned: true , bidder: req.user.id });\n                        \n            let parentAuctions = [];\n            for(let winnedAuctionOffer of winnedAuctionsOffers)\n                parentAuctions.push(winnedAuctionOffer.relatedAuction);\n\n            parentAuctions = isInAll_MyOffers_favourites(parentAuctions.reverse(), req, false);\n            \n            const pageCount = Math.ceil(winnedAuctionsOffersCount / limit);\n            let response = new ApiResponse(parentAuctions, page, pageCount, limit, winnedAuctionsOffersCount);\n            response.addSelfLink(req);\n\n            if (page > 1) {\n                response.addPrevLink(req);\n            }\n            if (page < pageCount) {\n                response.addNextLink(req);\n            }\n            res.send(response);\n        } catch(err){\n            next(err);\n        }\n    }\n}    "]}