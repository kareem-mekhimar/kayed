{"version":3,"sources":["../../src/controllers/user.controller.js"],"names":["jwtSecret","generateToken","sign","sub","id","iss","iat","Date","getTime","expiresIn","validateUserBody","req","isUpdate","checkBody","notEmpty","withMessage","custom","value","console","log","user","email","findOne","_id","$ne","Error","then","getValidationResult","checkIfUserExist","next","findById","NotFound","signUp","res","validationErrors","isEmpty","mapped","img","body","create","save","status","send","token","signIn","updateUser","params","findByIdAndUpdate","new","updatedUser","getUserBarters","query","page","limit","parseInt","find","relatedUser","populate","sort","creationDate","skip","userBarters","count","userBartersCount","pageCount","Math","ceil","response","addSelfLink","addPrevLink","addNextLink","getUserAuctions","userAuctions","userAuctionsCount"],"mappings":"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","file":"user.controller.js","sourcesContent":["import User from \"../models/user.model\";\nimport Barter from \"../models/barter.model\";\nimport Auction from \"../models/auction.model\";\n\nimport ApiResponse from \"../helpers/ApiResponse\";\nimport ApiError from \"../helpers/ApiError\";\nimport jwt from \"jsonwebtoken\";\nimport config from \"../config\";\nimport { writeBase64AndReturnUrl } from \"../utils\";\n\nconst { jwtSecret } = config;\n\n\nconst generateToken = id => {\n\n    return jwt.sign({\n        sub: id,\n        iss: 'App',\n        iat: new Date().getTime(),\n        expiresIn: 604800000\n    }, jwtSecret)\n}\n\n\nconst validateUserBody = (req, isUpdate = false) => {\n    if(isUpdate) {\n        req.checkBody(\"email\").notEmpty().withMessage(\"Email Required\")\n        .custom(async value => {\n            console.log(req.user.email);\n            console.log(value);\n            if (req.user.email !== value) {\n                console.log(\"IM HERE: \")\n                const user = await User.findOne({ email: value, _id: { $ne: req.user.id } })\n                if (user)\n                    throw new Error(\"email already taken\");\n            }\n        }).withMessage(\"email already taken\");\n    } else {\n        req.checkBody(\"email\").notEmpty().withMessage(\"Email Required\")\n        .custom(value => {\n            return User.findOne({ email: value }).then(user => {\n                if (user)\n                    throw new Error(\"email already exists\");\n            })\n        }).withMessage(\"email already exists\");\n    }\n    req.checkBody(\"password\").notEmpty().withMessage(\"Password required\");\n    req.checkBody(\"phone\").notEmpty().withMessage(\"Phone required\");\n    req.checkBody(\"fullName\").notEmpty().withMessage(\"FullName required\");\n    req.checkBody(\"country\").notEmpty().withMessage(\"Country required\");\n\n    return req.getValidationResult();\n}\n\nconst checkIfUserExist = async (id, next)  => {\n    const user = await User.findById(id);\n    if(!user)\n        return next(new ApiError.NotFound('User'));\n}\n\nexport default {\n\n    async signUp(req, res, next) {\n        const validationErrors = await validateUserBody(req);\n        \n        if (!validationErrors.isEmpty())\n            next(new ApiError(422, validationErrors.mapped()));\n        else {\n\n            let img = req.body.img;\n            delete req.body.img;\n\n            User.create(req.body).then(user => {\n\n                let id = user.id;\n                if (img) {\n                    user.img = writeBase64AndReturnUrl(img, \"users/\"+id, req);\n                    user.save();\n                }\n                res.status(201).send({ user, token: generateToken(id) });\n            });\n        }\n\n    },\n\n\n    async signIn(req, res, next) {\n        let user = req.user;\n        res.status(200).send({ user, token: generateToken(user.id) });\n    },\n\n\n    async updateUser(req, res, next) {\n\n        const validationErrors = await validateUserBody(req, true);\n        if (!validationErrors.isEmpty())\n            return next(new ApiError(422, validationErrors.mapped()));\n        \n        const { id } = req.params;\n        checkIfUserExist(id, next);\n\n        try {\n            let img = req.body.img;\n            delete req.body.img;\n\n            const updatedUser = await User.findByIdAndUpdate(id, req.body, { new: true });\n            if (!updatedUser)\n                return next(new ApiError.NotFound('User'));\n\n            if (img) {\n                updatedUser.img = writeBase64AndReturnUrl(img, id, req);\n                updatedUser.save();\n            }\n\n            res.status(200).send({ user: updatedUser, token: generateToken(id) });\n           \n        } catch (err) {\n            next(err)\n        }\n    },\n\n\n    async getUserBarters(req, res, next) {\n        let { id } = req.params;\n        checkIfUserExist(id, next);\n        \n        let { page, limit } = req.query;\n        \n        page = page ? parseInt(page) : 1;\n        limit = limit ? parseInt(limit) : 20;\n\n        try { \n            const userBarters = await Barter.find({ relatedUser: id}).populate('relatedCategory relatedUser')\n                                .sort({ creationDate: -1 })\n                                .limit(limit)\n                                .skip((page - 1) * limit);\n            \n            const userBartersCount = await Barter.count({ relatedUser : id});\n            \n            const pageCount = Math.ceil(userBartersCount / limit);\n            let response = new ApiResponse(userBarters, page, pageCount, limit, userBartersCount);\n            response.addSelfLink(req);\n\n            if (page > 1) {\n                response.addPrevLink(req);\n            }\n            if (page < pageCount) {\n                response.addNextLink(req);\n            }\n            res.send(response);\n        } catch(err){\n            next(err);\n        }\n    },\n\n\n    async getUserAuctions(req, res, next) {\n        let { id } = req.params;\n        checkIfUserExist(id, next);\n        \n        let { page, limit } = req.query;\n        \n        page = page ? parseInt(page) : 1;\n        limit = limit ? parseInt(limit) : 20;\n\n        try { \n            const userAuctions = await Auction.find({ relatedUser: id }).populate('relatedCategory relatedUser')\n                                .sort({ creationDate: -1 })\n                                .limit(limit)\n                                .skip((page - 1) * limit);\n                                \n            const userAuctionsCount = await Auction.count({ relatedUser : id});\n            \n            const pageCount = Math.ceil(userAuctionsCount / limit);\n            let response = new ApiResponse(userAuctions, page, pageCount, limit, userAuctionsCount);\n            response.addSelfLink(req);\n\n            if (page > 1) {\n                response.addPrevLink(req);\n            }\n            if (page < pageCount) {\n                response.addNextLink(req);\n            }\n            res.send(response);\n        } catch(err){\n            next(err);\n        }\n    }\n}\n"]}