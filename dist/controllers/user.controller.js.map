{"version":3,"sources":["../../src/controllers/user.controller.js"],"names":["jwtSecret","generateToken","sign","sub","id","iss","iat","Date","getTime","expiresIn","validateUserBody","req","checkBody","notEmpty","withMessage","custom","findOne","email","value","then","user","Error","getValidationResult","signUp","res","next","validationErrors","isEmpty","mapped","img","body","create","save","status","send","token","signIn","updateUser","params","findByIdAndUpdate","new","updatedUser","NotFound"],"mappings":"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","file":"user.controller.js","sourcesContent":["import User from \"../models/user.model\";\n\nimport ApiError from \"../helpers/ApiError\";\nimport jwt from \"jsonwebtoken\";\nimport config from \"../config\";\nimport { writeBase64AndReturnUrl } from \"../utils\";\n\nconst { jwtSecret } = config;\n\n\nconst generateToken = id => {\n\n    return jwt.sign({\n        sub: id,\n        iss: 'App',\n        iat: new Date().getTime(),\n        expiresIn: 604800000\n    }, jwtSecret)\n}\n\n\nconst validateUserBody = req => {\n\n    req.checkBody(\"email\").notEmpty().withMessage(\"Email Required\")\n        .custom(value => {\n            return User.findOne({ email: value }).then(user => {\n                if (user)\n                    throw new Error(\"email already exists\");\n            })\n        }).withMessage(\"email already exists\");\n\n    req.checkBody(\"password\").notEmpty().withMessage(\"Password required\");\n    req.checkBody(\"phone\").notEmpty().withMessage(\"Phone required\");\n    req.checkBody(\"fullName\").notEmpty().withMessage(\"FullName required\");\n    req.checkBody(\"country\").notEmpty().withMessage(\"Country required\");\n    return req.getValidationResult();\n}\n\n\nexport default {\n\n    async signUp(req, res, next) {\n\n        const validationErrors = await validateUserBody(req);\n\n        if (!validationErrors.isEmpty())\n            next(new ApiError(422, validationErrors.mapped()));\n        else {\n\n            let img = req.body.img;\n            delete req.body.img;\n\n            User.create(req.body).then(user => {\n\n                let id = user.id;\n                if (img) {\n                    user.img = writeBase64AndReturnUrl(img, \"users/\"+id, req);\n                    user.save();\n                }\n\n\n                res.status(201).send({ user, token: generateToken(id) });\n            });\n        }\n\n    },\n\n\n    async signIn(req, res, next) {\n        let user = req.user;\n        res.status(200).send({ user, token: generateToken(user.id) });\n    },\n\n\n    async updateUser(req, res, next) {\n        const { id } = req.params;\n\n        const validationErrors = await validateUserBody(req);\n        if (!validationErrors.isEmpty())\n            return next(new ApiError(422, validationErrors.mapped()));\n\n        try {\n            let img = req.body.img;\n            delete req.body.img;\n\n            const updatedUser = await User.findByIdAndUpdate(id, req.body, { new: true });\n            if (!updatedUser)\n                return next(new ApiError.NotFound('User'));\n\n            if (img) {\n                updatedUser.img = writeBase64AndReturnUrl(img, id, req);\n                updatedUser.save();\n            }\n\n            res.status(200).send({ user: updatedUser, token: generateToken(id) });\n           \n        } catch (err) {\n            next(err)\n        }\n    }\n}"]}