{"version":3,"sources":["../../src/controllers/user.controller.js"],"names":["jwtSecret","generateToken","sign","sub","id","iss","iat","Date","getTime","expiresIn","validateUserBody","req","isUpdate","checkBody","notEmpty","withMessage","custom","value","console","log","user","email","findOne","_id","$ne","Error","then","getValidationResult","signUp","res","next","validationErrors","isEmpty","mapped","img","body","create","save","status","send","token","signIn","updateUser","params","checkIfUserExist","findByIdAndUpdate","new","updatedUser","NotFound","findById","getUserBarters","query","page","limit","parseInt","Barter","find","populate","sort","creationDate","skip","userBarters","count","userBartersCount","pageCount","Math","ceil","response","ApiResponse","addSelfLink","addPrevLink","addNextLink"],"mappings":";;;;;;AAAA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;IAEQA,S,oBAAAA,S;;;AAGR,IAAMC,gBAAgB,SAAhBA,aAAgB,KAAM;;AAExB,WAAO,uBAAIC,IAAJ,CAAS;AACZC,aAAKC,EADO;AAEZC,aAAK,KAFO;AAGZC,aAAK,IAAIC,IAAJ,GAAWC,OAAX,EAHO;AAIZC,mBAAW;AAJC,KAAT,EAKJT,SALI,CAAP;AAMH,CARD;;AAWA,IAAMU,mBAAmB,SAAnBA,gBAAmB,CAACC,GAAD,EAA2B;AAAA,QAArBC,QAAqB,uEAAV,KAAU;;AAChD,QAAGA,QAAH,EAAa;AACTD,YAAIE,SAAJ,CAAc,OAAd,EAAuBC,QAAvB,GAAkCC,WAAlC,CAA8C,gBAA9C,EACCC,MADD;AAAA,+EACQ,iBAAMC,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACJC,wCAAQC,GAAR,CAAYR,IAAIS,IAAJ,CAASC,KAArB;AACAH,wCAAQC,GAAR,CAAYF,KAAZ;;AAFI,sCAGAN,IAAIS,IAAJ,CAASC,KAAT,KAAmBJ,KAHnB;AAAA;AAAA;AAAA;;AAIAC,wCAAQC,GAAR,CAAY,WAAZ;AAJA;AAAA,uCAKmB,eAAKG,OAAL,CAAa,EAAED,OAAOJ,KAAT,EAAgBM,KAAK,EAAEC,KAAKb,IAAIS,IAAJ,CAAShB,EAAhB,EAArB,EAAb,CALnB;;AAAA;AAKMgB,oCALN;;AAAA,qCAMIA,IANJ;AAAA;AAAA;AAAA;;AAAA,sCAOU,IAAIK,KAAJ,CAAU,qBAAV,CAPV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADR;;AAAA;AAAA;AAAA;AAAA,aAUGV,WAVH,CAUe,qBAVf;AAWH,KAZD,MAYO;AACHJ,YAAIE,SAAJ,CAAc,OAAd,EAAuBC,QAAvB,GAAkCC,WAAlC,CAA8C,gBAA9C,EACCC,MADD,CACQ,iBAAS;AACb,mBAAO,eAAKM,OAAL,CAAa,EAAED,OAAOJ,KAAT,EAAb,EAA+BS,IAA/B,CAAoC,gBAAQ;AAC/C,oBAAIN,IAAJ,EACI,MAAM,IAAIK,KAAJ,CAAU,sBAAV,CAAN;AACP,aAHM,CAAP;AAIH,SAND,EAMGV,WANH,CAMe,sBANf;AAOH;AACDJ,QAAIE,SAAJ,CAAc,UAAd,EAA0BC,QAA1B,GAAqCC,WAArC,CAAiD,mBAAjD;AACAJ,QAAIE,SAAJ,CAAc,OAAd,EAAuBC,QAAvB,GAAkCC,WAAlC,CAA8C,gBAA9C;AACAJ,QAAIE,SAAJ,CAAc,UAAd,EAA0BC,QAA1B,GAAqCC,WAArC,CAAiD,mBAAjD;AACAJ,QAAIE,SAAJ,CAAc,SAAd,EAAyBC,QAAzB,GAAoCC,WAApC,CAAgD,kBAAhD;;AAEA,WAAOJ,IAAIgB,mBAAJ,EAAP;AACH,CA5BD;;kBA+Be;AAELC,UAFK,kBAEEjB,GAFF,EAEOkB,GAFP,EAEYC,IAFZ,EAEkB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCACMpB,iBAAiBC,GAAjB,CADN;;AAAA;AACnBoB,4CADmB;;;AAGzB,gCAAI,CAACA,iBAAiBC,OAAjB,EAAL,EACIF,KAAK,uBAAa,GAAb,EAAkBC,iBAAiBE,MAAjB,EAAlB,CAAL,EADJ,KAEK;AAEGC,mCAFH,GAESvB,IAAIwB,IAAJ,CAASD,GAFlB;;AAGD,uCAAOvB,IAAIwB,IAAJ,CAASD,GAAhB;;AAEA,+CAAKE,MAAL,CAAYzB,IAAIwB,IAAhB,EAAsBT,IAAtB,CAA2B,gBAAQ;;AAE/B,wCAAItB,KAAKgB,KAAKhB,EAAd;AACA,wCAAI8B,GAAJ,EAAS;AACLd,6CAAKc,GAAL,GAAW,oCAAwBA,GAAxB,EAA6B,WAAS9B,EAAtC,EAA0CO,GAA1C,CAAX;AACAS,6CAAKiB,IAAL;AACH;AACDR,wCAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEnB,UAAF,EAAQoB,OAAOvC,cAAcG,EAAd,CAAf,EAArB;AACH,iCARD;AASH;;AAnBwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqB5B,KAvBU;AA0BLqC,UA1BK,kBA0BE9B,GA1BF,EA0BOkB,GA1BP,EA0BYC,IA1BZ,EA0BkB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACrBV,gCADqB,GACdT,IAAIS,IADU;;AAEzBS,gCAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEnB,UAAF,EAAQoB,OAAOvC,cAAcmB,KAAKhB,EAAnB,CAAf,EAArB;;AAFyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAG5B,KA7BU;AAgCLsC,cAhCK,sBAgCM/B,GAhCN,EAgCWkB,GAhCX,EAgCgBC,IAhChB,EAgCsB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAEEpB,iBAAiBC,GAAjB,EAAsB,IAAtB,CAFF;;AAAA;AAEvBoB,4CAFuB;;AAAA,gCAGxBA,iBAAiBC,OAAjB,EAHwB;AAAA;AAAA;AAAA;;AAAA,8DAIlBF,KAAK,uBAAa,GAAb,EAAkBC,iBAAiBE,MAAjB,EAAlB,CAAL,CAJkB;;AAAA;AAMrB7B,8BANqB,GAMdO,IAAIgC,MANU,CAMrBvC,EANqB;;AAO7BwC,6CAAiBxC,EAAjB,EAAqB0B,IAArB;;AAP6B;AAUrBI,+BAVqB,GAUfvB,IAAIwB,IAAJ,CAASD,GAVM;;AAWzB,mCAAOvB,IAAIwB,IAAJ,CAASD,GAAhB;;AAXyB;AAAA,mCAaC,eAAKW,iBAAL,CAAuBzC,EAAvB,EAA2BO,IAAIwB,IAA/B,EAAqC,EAAEW,KAAK,IAAP,EAArC,CAbD;;AAAA;AAanBC,uCAbmB;;AAAA,gCAcpBA,WAdoB;AAAA;AAAA;AAAA;;AAAA,8DAedjB,KAAK,IAAI,mBAASkB,QAAb,CAAsB,MAAtB,CAAL,CAfc;;AAAA;;AAiBzB,gCAAId,GAAJ,EAAS;AACLa,4CAAYb,GAAZ,GAAkB,oCAAwBA,GAAxB,EAA6B9B,EAA7B,EAAiCO,GAAjC,CAAlB;AACAoC,4CAAYV,IAAZ;AACH;;AAEDR,gCAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEnB,MAAM2B,WAAR,EAAqBP,OAAOvC,cAAcG,EAAd,CAA5B,EAArB;;AAtByB;AAAA;;AAAA;AAAA;AAAA;;AAyBzB0B;;AAzByB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2BhC,KA3DU;AA6DLc,oBA7DK,4BA6DYxC,EA7DZ,EA6DgB0B,IA7DhB,EA6DsB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCACV,eAAKmB,QAAL,CAAc7C,EAAd,CADU;;AAAA;AACvBgB,gCADuB;;AAAA,gCAEzBA,IAFyB;AAAA;AAAA;AAAA;;AAAA,8DAGlBU,KAAK,IAAI,mBAASkB,QAAb,CAAsB,MAAtB,CAAL,CAHkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIhC,KAjEU;AAmELE,kBAnEK,0BAmEUvC,GAnEV,EAmEekB,GAnEf,EAmEoBC,IAnEpB,EAmE0B;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC3B1B,8BAD2B,GACpBO,IAAIgC,MADgB,CAC3BvC,EAD2B;;AAEjCwC,6CAAiBxC,EAAjB,EAAqB0B,IAArB;;AAFiC,yCAIXnB,IAAIwC,KAJO,EAI3BC,IAJ2B,cAI3BA,IAJ2B,EAIrBC,KAJqB,cAIrBA,KAJqB;;;AAMjCD,mCAAOA,OAAOE,SAASF,IAAT,CAAP,GAAwB,CAA/B;AACAC,oCAAQA,QAAQC,SAASD,KAAT,CAAR,GAA0B,EAAlC;;AAPiC;AAAA;AAAA,mCAUHE,OAAOC,IAAP,CAAY,EAAEjC,KAAMZ,IAAIS,IAAJ,CAAShB,EAAjB,EAAZ,EAAmCqD,QAAnC,CAA4C,6BAA5C,EACLC,IADK,CACA,EAAEC,cAAc,CAAC,CAAjB,EADA,EAELN,KAFK,CAECA,KAFD,EAGLO,IAHK,CAGA,CAACR,OAAO,CAAR,IAAaC,KAHb,CAVG;;AAAA;AAUvBQ,uCAVuB;AAAA;AAAA,mCAeEN,OAAOO,KAAP,EAfF;;AAAA;AAevBC,4CAfuB;AAiBvBC,qCAjBuB,GAiBXC,KAAKC,IAAL,CAAUH,mBAAmBV,KAA7B,CAjBW;AAkBzBc,oCAlByB,GAkBd,IAAIC,WAAJ,CAAgBP,WAAhB,EAA6BT,IAA7B,EAAmCY,SAAnC,EAA8CX,KAA9C,EAAqDU,gBAArD,CAlBc;;AAmB7BI,qCAASE,WAAT,CAAqB1D,GAArB;;AAEA,gCAAIyC,OAAO,CAAX,EAAc;AACVe,yCAASG,WAAT,CAAqB3D,GAArB;AACH;AACD,gCAAIyC,OAAOY,SAAX,EAAsB;AAClBG,yCAASI,WAAT,CAAqB5D,GAArB;AACH;AACDkB,gCAAIU,IAAJ,CAAS4B,QAAT;AA3B6B;AAAA;;AAAA;AAAA;AAAA;;AA6B7BrC;;AA7B6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+BpC;AAlGU,C","file":"user.controller.js","sourcesContent":["import User from \"../models/user.model\";\n\nimport ApiError from \"../helpers/ApiError\";\nimport jwt from \"jsonwebtoken\";\nimport config from \"../config\";\nimport { writeBase64AndReturnUrl } from \"../utils\";\n\nconst { jwtSecret } = config;\n\n\nconst generateToken = id => {\n\n    return jwt.sign({\n        sub: id,\n        iss: 'App',\n        iat: new Date().getTime(),\n        expiresIn: 604800000\n    }, jwtSecret)\n}\n\n\nconst validateUserBody = (req, isUpdate = false) => {\n    if(isUpdate) {\n        req.checkBody(\"email\").notEmpty().withMessage(\"Email Required\")\n        .custom(async value => {\n            console.log(req.user.email);\n            console.log(value);\n            if (req.user.email !== value) {\n                console.log(\"IM HERE: \")\n                const user = await User.findOne({ email: value, _id: { $ne: req.user.id } })\n                if (user)\n                    throw new Error(\"email already taken\");\n            }\n        }).withMessage(\"email already taken\");\n    } else {\n        req.checkBody(\"email\").notEmpty().withMessage(\"Email Required\")\n        .custom(value => {\n            return User.findOne({ email: value }).then(user => {\n                if (user)\n                    throw new Error(\"email already exists\");\n            })\n        }).withMessage(\"email already exists\");\n    }\n    req.checkBody(\"password\").notEmpty().withMessage(\"Password required\");\n    req.checkBody(\"phone\").notEmpty().withMessage(\"Phone required\");\n    req.checkBody(\"fullName\").notEmpty().withMessage(\"FullName required\");\n    req.checkBody(\"country\").notEmpty().withMessage(\"Country required\");\n\n    return req.getValidationResult();\n}\n\n\nexport default {\n\n    async signUp(req, res, next) {\n        const validationErrors = await validateUserBody(req);\n        \n        if (!validationErrors.isEmpty())\n            next(new ApiError(422, validationErrors.mapped()));\n        else {\n\n            let img = req.body.img;\n            delete req.body.img;\n\n            User.create(req.body).then(user => {\n\n                let id = user.id;\n                if (img) {\n                    user.img = writeBase64AndReturnUrl(img, \"users/\"+id, req);\n                    user.save();\n                }\n                res.status(201).send({ user, token: generateToken(id) });\n            });\n        }\n\n    },\n\n\n    async signIn(req, res, next) {\n        let user = req.user;\n        res.status(200).send({ user, token: generateToken(user.id) });\n    },\n\n\n    async updateUser(req, res, next) {\n\n        const validationErrors = await validateUserBody(req, true);\n        if (!validationErrors.isEmpty())\n            return next(new ApiError(422, validationErrors.mapped()));\n        \n        const { id } = req.params;\n        checkIfUserExist(id, next);\n            \n        try {\n            let img = req.body.img;\n            delete req.body.img;\n\n            const updatedUser = await User.findByIdAndUpdate(id, req.body, { new: true });\n            if (!updatedUser)\n                return next(new ApiError.NotFound('User'));\n\n            if (img) {\n                updatedUser.img = writeBase64AndReturnUrl(img, id, req);\n                updatedUser.save();\n            }\n\n            res.status(200).send({ user: updatedUser, token: generateToken(id) });\n           \n        } catch (err) {\n            next(err)\n        }\n    },\n\n    async checkIfUserExist(id, next) {\n        const user = await User.findById(id);\n        if(!user)\n            return next(new ApiError.NotFound('User'));\n    },\n\n    async getUserBarters(req, res, next) {\n        let { id } = req.params;\n        checkIfUserExist(id, next);\n        \n        let { page, limit } = req.query;\n        \n        page = page ? parseInt(page) : 1;\n        limit = limit ? parseInt(limit) : 20;\n\n        try { \n            const userBarters = await Barter.find({ _id : req.user.id }).populate('relatedCategory relatedUser')\n                                .sort({ creationDate: -1 })\n                                .limit(limit)\n                                .skip((page - 1) * limit);\n                                \n            const userBartersCount = await Barter.count();\n            \n            const pageCount = Math.ceil(userBartersCount / limit);\n            let response = new ApiResponse(userBarters, page, pageCount, limit, userBartersCount);\n            response.addSelfLink(req);\n\n            if (page > 1) {\n                response.addPrevLink(req);\n            }\n            if (page < pageCount) {\n                response.addNextLink(req);\n            }\n            res.send(response);\n        } catch(err){\n            next(err);\n        }\n    }\n}"]}