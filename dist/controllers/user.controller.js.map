{"version":3,"sources":["../../src/controllers/user.controller.js"],"names":["jwtSecret","generateToken","sign","sub","id","iss","iat","Date","getTime","expiresIn","validateUserBody","req","isUpdate","checkBody","notEmpty","withMessage","custom","user","email","value","findOne","then","Error","getValidationResult","signUp","res","next","validationErrors","isEmpty","mapped","img","body","create","save","status","send","token","signIn","updateUser","params","findByIdAndUpdate","new","updatedUser","NotFound"],"mappings":"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","file":"user.controller.js","sourcesContent":["import User from \"../models/user.model\";\n\nimport ApiError from \"../helpers/ApiError\";\nimport jwt from \"jsonwebtoken\";\nimport config from \"../config\";\nimport { writeBase64AndReturnUrl } from \"../utils\";\n\nconst { jwtSecret } = config;\n\n\nconst generateToken = id => {\n\n    return jwt.sign({\n        sub: id,\n        iss: 'App',\n        iat: new Date().getTime(),\n        expiresIn: 604800000\n    }, jwtSecret)\n}\n\n\nconst validateUserBody = (req, isUpdate = false) => {\n    if(isUpdate){\n        req.checkBody(\"email\").notEmpty().withMessage(\"Email Required\")\n        .custom(value => {\n            if (req.user.email !== value) {\n                return User.findOne({ email: value }).then(user => {\n                    if (user)\n                        throw new Error(\"email already taken\");\n                })\n            } \n        }).withMessage(\"email already taken\");\n    } else {\n        req.checkBody(\"email\").notEmpty().withMessage(\"Email Required\")\n        .custom(value => {\n            return User.findOne({ email: value }).then(user => {\n                if (user)\n                    throw new Error(\"email already exists\");\n            })\n        }).withMessage(\"email already exists\");\n    }\n    req.checkBody(\"password\").notEmpty().withMessage(\"Password required\");\n    req.checkBody(\"phone\").notEmpty().withMessage(\"Phone required\");\n    req.checkBody(\"fullName\").notEmpty().withMessage(\"FullName required\");\n    req.checkBody(\"country\").notEmpty().withMessage(\"Country required\");\n\n    return req.getValidationResult();\n}\n\n\nexport default {\n\n    async signUp(req, res, next) {\n\n        const validationErrors = await validateUserBody(req);\n\n        if (!validationErrors.isEmpty())\n            next(new ApiError(422, validationErrors.mapped()));\n        else {\n\n            let img = req.body.img;\n            delete req.body.img;\n\n            User.create(req.body).then(user => {\n\n                let id = user.id;\n                if (img) {\n                    user.img = writeBase64AndReturnUrl(img, \"users/\"+id, req);\n                    user.save();\n                }\n\n\n                res.status(201).send({ user, token: generateToken(id) });\n            });\n        }\n\n    },\n\n\n    async signIn(req, res, next) {\n        let user = req.user;\n        res.status(200).send({ user, token: generateToken(user.id) });\n    },\n\n\n    async updateUser(req, res, next) {\n        const { id } = req.params;\n\n        const validationErrors = await validateUserBody(req, true);\n        if (!validationErrors.isEmpty())\n            return next(new ApiError(422, validationErrors.mapped()));\n\n        try {\n            let img = req.body.img;\n            delete req.body.img;\n\n            const updatedUser = await User.findByIdAndUpdate(id, req.body, { new: true });\n            if (!updatedUser)\n                return next(new ApiError.NotFound('User'));\n\n            if (img) {\n                updatedUser.img = writeBase64AndReturnUrl(img, id, req);\n                updatedUser.save();\n            }\n\n            res.status(200).send({ user: updatedUser, token: generateToken(id) });\n           \n        } catch (err) {\n            next(err)\n        }\n    }\n}"]}