{"version":3,"sources":["../../src/controllers/user.controller.js"],"names":["jwtSecret","generateToken","sign","sub","id","iss","iat","Date","getTime","expiresIn","validateUserBody","req","isUpdate","checkBody","notEmpty","withMessage","custom","value","user","email","findOne","_id","$ne","Error","then","getValidationResult","checkIfUserExist","next","findById","NotFound","signUp","res","validationErrors","isEmpty","mapped","img","body","create","save","status","send","token","signIn","updateUser","params","findByIdAndUpdate","new","updatedUser","getUserBarters","query","page","limit","parseInt","find","relatedUser","populate","sort","creationDate","skip","userBarters","count","userBartersCount","pageCount","Math","ceil","response","addSelfLink","addPrevLink","addNextLink","getUserAuctions","userAuctions","userAuctionsCount","getUserFavoriteBarters","path","model","userFavBarters","userFavBartersCount","getUserFavoriteAuctions","userFavAuctions","userFavAuctionsCount","updateFavBarter","barter","userFavBarter","createdUserFavBarter","updateFavAuction","auction","userFavAuction","createdUserFavAuction","deleteFavBarter","barterId","remove","deletedFavBarter","deleteFavAuction","auctionId","deletedFavAuction"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;IAEQA,S,oBAAAA,S;;;AAGR,IAAMC,gBAAgB,SAAhBA,aAAgB,KAAM;;AAExB,WAAO,uBAAIC,IAAJ,CAAS;AACZC,aAAKC,EADO;AAEZC,aAAK,KAFO;AAGZC,aAAK,IAAIC,IAAJ,GAAWC,OAAX,EAHO;AAIZC,mBAAW;AAJC,KAAT,EAKJT,SALI,CAAP;AAMH,CARD;;AAWA,IAAMU,mBAAmB,SAAnBA,gBAAmB,CAACC,GAAD,EAA2B;AAAA,QAArBC,QAAqB,uEAAV,KAAU;;AAChD,QAAGA,QAAH,EAAa;AACTD,YAAIE,SAAJ,CAAc,OAAd,EAAuBC,QAAvB,GAAkCC,WAAlC,CAA8C,gBAA9C,EACCC,MADD;AAAA,+EACQ,iBAAMC,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCACAN,IAAIO,IAAJ,CAASC,KAAT,KAAmBF,KADnB;AAAA;AAAA;AAAA;;AAAA;AAAA,uCAEmB,eAAKG,OAAL,CAAa,EAAED,OAAOF,KAAT,EAAgBI,KAAK,EAAEC,KAAKX,IAAIO,IAAJ,CAASG,GAAhB,EAArB,EAAb,CAFnB;;AAAA;AAEMH,oCAFN;;AAAA,qCAGIA,IAHJ;AAAA;AAAA;AAAA;;AAAA,sCAIU,IAAIK,KAAJ,CAAU,qBAAV,CAJV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADR;;AAAA;AAAA;AAAA;AAAA,aAOGR,WAPH,CAOe,qBAPf;AAQH,KATD,MASO;AACHJ,YAAIE,SAAJ,CAAc,OAAd,EAAuBC,QAAvB,GAAkCC,WAAlC,CAA8C,gBAA9C,EACCC,MADD,CACQ,iBAAS;AACb,mBAAO,eAAKI,OAAL,CAAa,EAAED,OAAOF,KAAT,EAAb,EAA+BO,IAA/B,CAAoC,gBAAQ;AAC/C,oBAAIN,IAAJ,EACI,MAAM,IAAIK,KAAJ,CAAU,sBAAV,CAAN;AACP,aAHM,CAAP;AAIH,SAND,EAMGR,WANH,CAMe,sBANf;AAOH;AACDJ,QAAIE,SAAJ,CAAc,UAAd,EAA0BC,QAA1B,GAAqCC,WAArC,CAAiD,mBAAjD;AACAJ,QAAIE,SAAJ,CAAc,OAAd,EAAuBC,QAAvB,GAAkCC,WAAlC,CAA8C,gBAA9C;AACAJ,QAAIE,SAAJ,CAAc,UAAd,EAA0BC,QAA1B,GAAqCC,WAArC,CAAiD,mBAAjD;AACAJ,QAAIE,SAAJ,CAAc,SAAd,EAAyBC,QAAzB,GAAoCC,WAApC,CAAgD,kBAAhD;;AAEA,WAAOJ,IAAIc,mBAAJ,EAAP;AACH,CAzBD;;AA2BA,IAAMC;AAAA,wEAAmB,kBAAOtB,EAAP,EAAWuB,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACF,eAAKC,QAAL,CAAcxB,EAAd,CADE;;AAAA;AACfc,4BADe;;AAAA,4BAEjBA,IAFiB;AAAA;AAAA;AAAA;;AAAA,0DAGVS,KAAK,IAAI,mBAASE,QAAb,CAAsB,MAAtB,CAAL,CAHU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAnB;;AAAA;AAAA;AAAA;AAAA,GAAN;;kBAMe;AAELC,UAFK,kBAEEnB,GAFF,EAEOoB,GAFP,EAEYJ,IAFZ,EAEkB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCACMjB,iBAAiBC,GAAjB,CADN;;AAAA;AACnBqB,4CADmB;;;AAGzB,gCAAI,CAACA,iBAAiBC,OAAjB,EAAL,EACIN,KAAK,uBAAa,GAAb,EAAkBK,iBAAiBE,MAAjB,EAAlB,CAAL,EADJ,KAEK;AAEGC,mCAFH,GAESxB,IAAIyB,IAAJ,CAASD,GAFlB;;AAGD,uCAAOxB,IAAIyB,IAAJ,CAASD,GAAhB;;AAEA,+CAAKE,MAAL,CAAY1B,IAAIyB,IAAhB,EAAsBZ,IAAtB,CAA2B,gBAAQ;;AAE/B,wCAAIpB,KAAKc,KAAKd,EAAd;AACA,wCAAI+B,GAAJ,EAAS;AACLjB,6CAAKiB,GAAL,GAAW,oCAAwBA,GAAxB,EAA6B,WAAS/B,EAAtC,EAA0CO,GAA1C,CAAX;AACAO,6CAAKoB,IAAL;AACH;AACDP,wCAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEtB,UAAF,EAAQuB,OAAOxC,cAAcG,EAAd,CAAf,EAArB;AACH,iCARD;AASH;;AAnBwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqB5B,KAvBU;AA0BLsC,UA1BK,kBA0BE/B,GA1BF,EA0BOoB,GA1BP,EA0BYJ,IA1BZ,EA0BkB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACrBT,gCADqB,GACdP,IAAIO,IADU;;AAEzBa,gCAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEtB,UAAF,EAAQuB,OAAOxC,cAAciB,KAAKd,EAAnB,CAAf,EAArB;;AAFyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAG5B,KA7BU;AAgCLuC,cAhCK,sBAgCMhC,GAhCN,EAgCWoB,GAhCX,EAgCgBJ,IAhChB,EAgCsB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAEEjB,iBAAiBC,GAAjB,EAAsB,IAAtB,CAFF;;AAAA;AAEvBqB,4CAFuB;;AAAA,gCAGxBA,iBAAiBC,OAAjB,EAHwB;AAAA;AAAA;AAAA;;AAAA,8DAIlBN,KAAK,uBAAa,GAAb,EAAkBK,iBAAiBE,MAAjB,EAAlB,CAAL,CAJkB;;AAAA;AAMrB9B,8BANqB,GAMdO,IAAIiC,MANU,CAMrBxC,EANqB;;AAO7BsB,6CAAiBtB,EAAjB,EAAqBuB,IAArB;;AAP6B;AAUrBQ,+BAVqB,GAUfxB,IAAIyB,IAAJ,CAASD,GAVM;;AAWzB,mCAAOxB,IAAIyB,IAAJ,CAASD,GAAhB;;AAXyB;AAAA,mCAaC,eAAKU,iBAAL,CAAuBzC,EAAvB,EAA2BO,IAAIyB,IAA/B,EAAqC,EAAEU,KAAK,IAAP,EAArC,CAbD;;AAAA;AAanBC,uCAbmB;;AAAA,gCAcpBA,WAdoB;AAAA;AAAA;AAAA;;AAAA,8DAedpB,KAAK,IAAI,mBAASE,QAAb,CAAsB,MAAtB,CAAL,CAfc;;AAAA;;AAiBzB,gCAAIM,GAAJ,EAAS;AACLY,4CAAYZ,GAAZ,GAAkB,oCAAwBA,GAAxB,EAA6B/B,EAA7B,EAAiCO,GAAjC,CAAlB;AACAoC,4CAAYT,IAAZ;AACH;;AAEDP,gCAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEtB,MAAM6B,WAAR,EAArB;;AAtByB;AAAA;;AAAA;AAAA;AAAA;;AAyBzBpB;;AAzByB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2BhC,KA3DU;AA8DLqB,kBA9DK,0BA8DUrC,GA9DV,EA8DeoB,GA9Df,EA8DoBJ,IA9DpB,EA8D0B;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC3BvB,8BAD2B,GACpBO,IAAIiC,MADgB,CAC3BxC,EAD2B;;AAEjCsB,6CAAiBtB,EAAjB,EAAqBuB,IAArB;;AAFiC,yCAIXhB,IAAIsC,KAJO,EAI3BC,IAJ2B,cAI3BA,IAJ2B,EAIrBC,KAJqB,cAIrBA,KAJqB;;;AAMjCD,mCAAOA,OAAOE,SAASF,IAAT,CAAP,GAAwB,CAA/B;AACAC,oCAAQA,QAAQC,SAASD,KAAT,CAAR,GAA0B,EAAlC;;AAPiC;AAAA;AAAA,mCAUH,iBAAOE,IAAP,CAAY,EAAEC,aAAalD,EAAf,EAAZ,EAAgCmD,QAAhC,CAAyC,6BAAzC,EACLC,IADK,CACA,EAAEC,cAAc,CAAC,CAAjB,EADA,EAELN,KAFK,CAECA,KAFD,EAGLO,IAHK,CAGA,CAACR,OAAO,CAAR,IAAaC,KAHb,CAVG;;AAAA;AAUvBQ,uCAVuB;AAAA;AAAA,mCAeE,iBAAOC,KAAP,CAAa,EAAEN,aAAclD,EAAhB,EAAb,CAfF;;AAAA;AAevByD,4CAfuB;AAiBvBC,qCAjBuB,GAiBXC,KAAKC,IAAL,CAAUH,mBAAmBV,KAA7B,CAjBW;AAkBzBc,oCAlByB,GAkBd,0BAAgBN,WAAhB,EAA6BT,IAA7B,EAAmCY,SAAnC,EAA8CX,KAA9C,EAAqDU,gBAArD,CAlBc;;AAmB7BI,qCAASC,WAAT,CAAqBvD,GAArB;;AAEA,gCAAIuC,OAAO,CAAX,EAAc;AACVe,yCAASE,WAAT,CAAqBxD,GAArB;AACH;AACD,gCAAIuC,OAAOY,SAAX,EAAsB;AAClBG,yCAASG,WAAT,CAAqBzD,GAArB;AACH;AACDoB,gCAAIS,IAAJ,CAASyB,QAAT;AA3B6B;AAAA;;AAAA;AAAA;AAAA;;AA6B7BtC;;AA7B6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+BpC,KA7FU;AAgGL0C,mBAhGK,2BAgGW1D,GAhGX,EAgGgBoB,GAhGhB,EAgGqBJ,IAhGrB,EAgG2B;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC5BvB,8BAD4B,GACrBO,IAAIiC,MADiB,CAC5BxC,EAD4B;;AAElCsB,6CAAiBtB,EAAjB,EAAqBuB,IAArB;;AAFkC,0CAIZhB,IAAIsC,KAJQ,EAI5BC,IAJ4B,eAI5BA,IAJ4B,EAItBC,KAJsB,eAItBA,KAJsB;;;AAMlCD,mCAAOA,OAAOE,SAASF,IAAT,CAAP,GAAwB,CAA/B;AACAC,oCAAQA,QAAQC,SAASD,KAAT,CAAR,GAA0B,EAAlC;;AAPkC;AAAA;AAAA,mCAUH,kBAAQE,IAAR,CAAa,EAAEC,aAAalD,EAAf,EAAb,EAAkCmD,QAAlC,CAA2C,6BAA3C,EACNC,IADM,CACD,EAAEC,cAAc,CAAC,CAAjB,EADC,EAENN,KAFM,CAEAA,KAFA,EAGNO,IAHM,CAGD,CAACR,OAAO,CAAR,IAAaC,KAHZ,CAVG;;AAAA;AAUxBmB,wCAVwB;AAAA;AAAA,mCAeE,kBAAQV,KAAR,CAAc,EAAEN,aAAclD,EAAhB,EAAd,CAfF;;AAAA;AAexBmE,6CAfwB;AAiBxBT,qCAjBwB,GAiBZC,KAAKC,IAAL,CAAUO,oBAAoBpB,KAA9B,CAjBY;AAkB1Bc,oCAlB0B,GAkBf,0BAAgBK,YAAhB,EAA8BpB,IAA9B,EAAoCY,SAApC,EAA+CX,KAA/C,EAAsDoB,iBAAtD,CAlBe;;AAmB9BN,qCAASC,WAAT,CAAqBvD,GAArB;;AAEA,gCAAIuC,OAAO,CAAX,EAAc;AACVe,yCAASE,WAAT,CAAqBxD,GAArB;AACH;AACD,gCAAIuC,OAAOY,SAAX,EAAsB;AAClBG,yCAASG,WAAT,CAAqBzD,GAArB;AACH;AACDoB,gCAAIS,IAAJ,CAASyB,QAAT;AA3B8B;AAAA;;AAAA;AAAA;AAAA;;AA6B9BtC;;AA7B8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+BrC,KA/HU;AAkIL6C,0BAlIK,kCAkIkB7D,GAlIlB,EAkIuBoB,GAlIvB,EAkI4BJ,IAlI5B,EAkIkC;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACnCvB,8BADmC,GAC5BO,IAAIiC,MADwB,CACnCxC,EADmC;;AAEzCsB,6CAAiBtB,EAAjB,EAAqBuB,IAArB;;AAFyC,0CAInBhB,IAAIsC,KAJe,EAInCC,IAJmC,eAInCA,IAJmC,EAI7BC,KAJ6B,eAI7BA,KAJ6B;;;AAMzCD,mCAAOA,OAAOE,SAASF,IAAT,CAAP,GAAwB,CAA/B;AACAC,oCAAQA,QAAQC,SAASD,KAAT,CAAR,GAA0B,EAAlC;;AAPyC;AAAA;AAAA,mCAUR,oBAAUE,IAAV,CAAe,EAAEnC,MAAMd,EAAR,EAAf,EAA6BmD,QAA7B,CAAsC;AAC/DkB,sCAAM,QADyD;AAE/DC,uCAAO,QAFwD;AAG/DnB,0CAAU;AACRkB,0CAAM;AADE;AAHqD,6BAAtC,EAO5BjB,IAP4B,CAOvB,EAAEC,cAAc,CAAC,CAAjB,EAPuB,EAQ5BN,KAR4B,CAQtBA,KARsB,EAS5BO,IAT4B,CASvB,CAACR,OAAO,CAAR,IAAaC,KATU,CAVQ;;AAAA;AAU/BwB,0CAV+B;AAAA;AAAA,mCAqBH,oBAAUf,KAAV,CAAgB,EAAE1C,MAAOd,EAAT,EAAhB,CArBG;;AAAA;AAqB/BwE,+CArB+B;AAuB/Bd,qCAvB+B,GAuBnBC,KAAKC,IAAL,CAAUY,sBAAsBzB,KAAhC,CAvBmB;AAwBjCc,oCAxBiC,GAwBtB,0BAAgBU,cAAhB,EAAgCzB,IAAhC,EAAsCY,SAAtC,EAAiDX,KAAjD,EAAwDyB,mBAAxD,CAxBsB;;AAyBrCX,qCAASC,WAAT,CAAqBvD,GAArB;;AAEA,gCAAIuC,OAAO,CAAX,EAAc;AACVe,yCAASE,WAAT,CAAqBxD,GAArB;AACH;AACD,gCAAIuC,OAAOY,SAAX,EAAsB;AAClBG,yCAASG,WAAT,CAAqBzD,GAArB;AACH;AACDoB,gCAAIS,IAAJ,CAASyB,QAAT;AAjCqC;AAAA;;AAAA;AAAA;AAAA;;AAmCrCtC;;AAnCqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqC5C,KAvKU;AA0KLkD,2BA1KK,mCA0KmBlE,GA1KnB,EA0KwBoB,GA1KxB,EA0K6BJ,IA1K7B,EA0KmC;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACpCvB,8BADoC,GAC7BO,IAAIiC,MADyB,CACpCxC,EADoC;;AAE1CsB,6CAAiBtB,EAAjB,EAAqBuB,IAArB;;AAF0C,0CAIpBhB,IAAIsC,KAJgB,EAIpCC,IAJoC,eAIpCA,IAJoC,EAI9BC,KAJ8B,eAI9BA,KAJ8B;;;AAM1CD,mCAAOA,OAAOE,SAASF,IAAT,CAAP,GAAwB,CAA/B;AACAC,oCAAQA,QAAQC,SAASD,KAAT,CAAR,GAA0B,EAAlC;;AAP0C;AAAA;AAAA,mCAUR,qBAAWE,IAAX,CAAgB,EAAEnC,MAAMd,EAAR,EAAhB,EAA8BmD,QAA9B,CAAuC;AACjEkB,sCAAM,SAD2D;AAEjEC,uCAAO,SAF0D;AAGjEnB,0CAAU;AACRkB,0CAAM;AADE;AAHuD,6BAAvC,EAO7BjB,IAP6B,CAOxB,EAAEC,cAAc,CAAC,CAAjB,EAPwB,EAQ7BN,KAR6B,CAQvBA,KARuB,EAS7BO,IAT6B,CASxB,CAACR,OAAO,CAAR,IAAaC,KATW,CAVQ;;AAAA;AAUhC2B,2CAVgC;AAAA;AAAA,mCAqBH,qBAAWlB,KAAX,CAAiB,EAAE1C,MAAOd,EAAT,EAAjB,CArBG;;AAAA;AAqBhC2E,gDArBgC;AAuBhCjB,qCAvBgC,GAuBpBC,KAAKC,IAAL,CAAUe,uBAAuB5B,KAAjC,CAvBoB;AAwBlCc,oCAxBkC,GAwBvB,0BAAgBa,eAAhB,EAAiC5B,IAAjC,EAAuCY,SAAvC,EAAkDX,KAAlD,EAAyD4B,oBAAzD,CAxBuB;;AAyBtCd,qCAASC,WAAT,CAAqBvD,GAArB;;AAEA,gCAAIuC,OAAO,CAAX,EAAc;AACVe,yCAASE,WAAT,CAAqBxD,GAArB;AACH;AACD,gCAAIuC,OAAOY,SAAX,EAAsB;AAClBG,yCAASG,WAAT,CAAqBzD,GAArB;AACH;AACDoB,gCAAIS,IAAJ,CAASyB,QAAT;AAjCsC;AAAA;;AAAA;AAAA;AAAA;;AAmCtCtC;;AAnCsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqC7C,KA/MU;AAkNLqD,mBAlNK,2BAkNWrE,GAlNX,EAkNgBoB,GAlNhB,EAkNqBJ,IAlNrB,EAkN2B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1BvB,8BAD0B,GACnBO,IAAIiC,MADe,CAC1BxC,EAD0B;;AAElCsB,6CAAiBtB,EAAjB,EAAqBuB,IAArB;;AAFkC,gCAI9BhB,IAAIyB,IAAJ,CAAS6C,MAJqB;AAAA;AAAA;AAAA;;AAAA,+DAKvBtD,KAAK,uBAAa,GAAb,EAAkB,oBAAlB,CAAL,CALuB;;AAAA;AAMjC;;AANiC;AAAA;AAAA,mCAST,iBAAOC,QAAP,CAAgBjB,IAAIyB,IAAJ,CAAS6C,MAAzB,CATS;;AAAA;AASxBA,kCATwB;;AAAA,gCAU1BA,MAV0B;AAAA;AAAA;AAAA;;AAAA,+DAWnBtD,KAAK,IAAI,mBAASE,QAAb,CAAsB,QAAtB,CAAL,CAXmB;;AAAA;AAAA;AAAA,mCAaF,oBAAUT,OAAV,CAAkB,EAAEF,MAAMd,EAAR,EAAa6E,QAAQA,OAAO7E,EAA5B,EAAlB,CAbE;;AAAA;AAaxB8E,yCAbwB;;AAAA,gCAczBA,aAdyB;AAAA;AAAA;AAAA;;AAAA;AAAA,mCAeS,oBAAU7C,MAAV,CAAiB,EAAEnB,MAAMd,EAAR,EAAa6E,QAAQtE,IAAIyB,IAAJ,CAAS6C,MAA9B,EAAjB,CAfT;;AAAA;AAepBE,gDAfoB;;AAgB1BpD,gCAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB2C,oBAArB;;AAhB0B;AAkB9B;AACApD,gCAAIS,IAAJ;AAnB8B;AAAA;;AAAA;AAAA;AAAA;;AAsB9Bb;;AAtB8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBrC,KA1OU;AA6OLyD,oBA7OK,4BA6OYzE,GA7OZ,EA6OiBoB,GA7OjB,EA6OsBJ,IA7OtB,EA6O4B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3BvB,8BAD2B,GACpBO,IAAIiC,MADgB,CAC3BxC,EAD2B;;AAEnCsB,6CAAiBtB,EAAjB,EAAqBuB,IAArB;;AAFmC,gCAI/BhB,IAAIyB,IAAJ,CAASiD,OAJsB;AAAA;AAAA;AAAA;;AAAA,+DAKxB1D,KAAK,uBAAa,GAAb,EAAkB,qBAAlB,CAAL,CALwB;;AAAA;AAMlC;;AANkC;AAAA;AAAA,mCAST,kBAAQC,QAAR,CAAiBjB,IAAIyB,IAAJ,CAASiD,OAA1B,CATS;;AAAA;AASzBA,mCATyB;;AAAA,gCAU3BA,OAV2B;AAAA;AAAA;AAAA;;AAAA,+DAWpB1D,KAAK,IAAI,mBAASE,QAAb,CAAsB,SAAtB,CAAL,CAXoB;;AAAA;AAAA;AAAA,mCAaF,oBAAUT,OAAV,CAAkB,EAAEF,MAAMd,EAAR,EAAaiF,SAASA,QAAQjF,EAA9B,EAAlB,CAbE;;AAAA;AAazBkF,0CAbyB;;AAAA,gCAc1BA,cAd0B;AAAA;AAAA;AAAA;;AAAA;AAAA,mCAeQ,qBAAWjD,MAAX,CAAkB,EAAEnB,MAAMd,EAAR,EAAaiF,SAAS1E,IAAIyB,IAAJ,CAASiD,OAA/B,EAAlB,CAfR;;AAAA;AAerBE,iDAfqB;;AAgB3BxD,gCAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB+C,qBAArB;;AAhB2B;AAkB/B;AACAxD,gCAAIS,IAAJ;AAnB+B;AAAA;;AAAA;AAAA;AAAA;;AAsB/Bb;;AAtB+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBtC,KArQU;AAuQL6D,mBAvQK,2BAuQW7E,GAvQX,EAuQgBoB,GAvQhB,EAuQqBJ,IAvQrB,EAuQ2B;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,0CACThB,IAAIiC,MADK,EAC1BxC,EAD0B,eAC1BA,EAD0B,EACtBqF,QADsB,eACtBA,QADsB;AAAA;AAAA;AAAA,mCAGC,oBAAUrE,OAAV,CAAkB,EAAEF,MAAOd,EAAT,EAAa6E,QAAQQ,QAArB,EAAlB,EAAkDC,MAAlD,EAHD;;AAAA;AAGxBC,4CAHwB;;AAAA,gCAIzBA,gBAJyB;AAAA;AAAA;AAAA;;AAAA,+DAKnBhE,KAAK,IAAI,mBAASE,QAAb,CAAsB,sBAAtB,CAAL,CALmB;;AAAA;AAM9BE,gCAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;AAN8B;AAAA;;AAAA;AAAA;AAAA;;AAS9Bb;;AAT8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWrC,KAlRU;AAqRLiE,oBArRK,4BAqRYjF,GArRZ,EAqRiBoB,GArRjB,EAqRsBJ,IArRtB,EAqR4B;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,2CACThB,IAAIiC,MADK,EAC3BxC,EAD2B,gBAC3BA,EAD2B,EACvByF,SADuB,gBACvBA,SADuB;AAAA;AAAA;AAAA,mCAGC,qBAAWzE,OAAX,CAAmB,EAAEF,MAAOd,EAAT,EAAaiF,SAASQ,SAAtB,EAAnB,EAAqDH,MAArD,EAHD;;AAAA;AAGzBI,6CAHyB;;AAAA,gCAI1BA,iBAJ0B;AAAA;AAAA;AAAA;;AAAA,+DAKpBnE,KAAK,IAAI,mBAASE,QAAb,CAAsB,uBAAtB,CAAL,CALoB;;AAAA;AAM/BE,gCAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;AAN+B;AAAA;;AAAA;AAAA;AAAA;;AAS/Bb;;AAT+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWtC;AAhSU,C","file":"user.controller.js","sourcesContent":["import User from \"../models/user.model\";\nimport Barter from \"../models/barter.model\";\nimport Auction from \"../models/auction.model\";\nimport FavBarter from \"../models/fav-barter.model\";\nimport FavAuction from \"../models/fav-auction.model\";\nimport ApiResponse from \"../helpers/ApiResponse\";\nimport ApiError from \"../helpers/ApiError\";\nimport jwt from \"jsonwebtoken\";\nimport config from \"../config\";\nimport { writeBase64AndReturnUrl } from \"../utils\";\n\nconst { jwtSecret } = config;\n\n\nconst generateToken = id => {\n\n    return jwt.sign({\n        sub: id,\n        iss: 'App',\n        iat: new Date().getTime(),\n        expiresIn: 604800000\n    }, jwtSecret)\n}\n\n\nconst validateUserBody = (req, isUpdate = false) => {\n    if(isUpdate) {\n        req.checkBody(\"email\").notEmpty().withMessage(\"Email Required\")\n        .custom(async value => {\n            if (req.user.email !== value) {\n                const user = await User.findOne({ email: value, _id: { $ne: req.user._id } })\n                if (user)\n                    throw new Error(\"email already taken\");\n            }\n        }).withMessage(\"email already taken\");\n    } else {\n        req.checkBody(\"email\").notEmpty().withMessage(\"Email Required\")\n        .custom(value => {\n            return User.findOne({ email: value }).then(user => {\n                if (user)\n                    throw new Error(\"email already exists\");\n            })\n        }).withMessage(\"email already exists\");\n    }\n    req.checkBody(\"password\").notEmpty().withMessage(\"Password required\");\n    req.checkBody(\"phone\").notEmpty().withMessage(\"Phone required\");\n    req.checkBody(\"fullName\").notEmpty().withMessage(\"FullName required\");\n    req.checkBody(\"country\").notEmpty().withMessage(\"Country required\");\n\n    return req.getValidationResult();\n}\n\nconst checkIfUserExist = async (id, next)  => {\n    const user = await User.findById(id);\n    if(!user)\n        return next(new ApiError.NotFound('User'));\n}\n\nexport default {\n\n    async signUp(req, res, next) {\n        const validationErrors = await validateUserBody(req);\n        \n        if (!validationErrors.isEmpty())\n            next(new ApiError(422, validationErrors.mapped()));\n        else {\n\n            let img = req.body.img;\n            delete req.body.img;\n\n            User.create(req.body).then(user => {\n\n                let id = user.id;\n                if (img) {\n                    user.img = writeBase64AndReturnUrl(img, \"users/\"+id, req);\n                    user.save();\n                }\n                res.status(201).send({ user, token: generateToken(id) });\n            });\n        }\n\n    },\n\n\n    async signIn(req, res, next) {\n        let user = req.user;\n        res.status(200).send({ user, token: generateToken(user.id) });\n    },\n\n\n    async updateUser(req, res, next) {\n\n        const validationErrors = await validateUserBody(req, true);\n        if (!validationErrors.isEmpty())\n            return next(new ApiError(422, validationErrors.mapped()));\n        \n        const { id } = req.params;\n        checkIfUserExist(id, next);\n\n        try {\n            let img = req.body.img;\n            delete req.body.img;\n\n            const updatedUser = await User.findByIdAndUpdate(id, req.body, { new: true });\n            if (!updatedUser)\n                return next(new ApiError.NotFound('User'));\n\n            if (img) {\n                updatedUser.img = writeBase64AndReturnUrl(img, id, req);\n                updatedUser.save();\n            }\n\n            res.status(200).send({ user: updatedUser });\n           \n        } catch (err) {\n            next(err)\n        }\n    },\n\n\n    async getUserBarters(req, res, next) {\n        let { id } = req.params;\n        checkIfUserExist(id, next);\n        \n        let { page, limit } = req.query;\n        \n        page = page ? parseInt(page) : 1;\n        limit = limit ? parseInt(limit) : 20;\n\n        try { \n            const userBarters = await Barter.find({ relatedUser: id}).populate('relatedCategory relatedUser')\n                                .sort({ creationDate: -1 })\n                                .limit(limit)\n                                .skip((page - 1) * limit);\n            \n            const userBartersCount = await Barter.count({ relatedUser : id});\n            \n            const pageCount = Math.ceil(userBartersCount / limit);\n            let response = new ApiResponse(userBarters, page, pageCount, limit, userBartersCount);\n            response.addSelfLink(req);\n\n            if (page > 1) {\n                response.addPrevLink(req);\n            }\n            if (page < pageCount) {\n                response.addNextLink(req);\n            }\n            res.send(response);\n        } catch(err){\n            next(err);\n        }\n    },\n\n\n    async getUserAuctions(req, res, next) {\n        let { id } = req.params;\n        checkIfUserExist(id, next);\n        \n        let { page, limit } = req.query;\n        \n        page = page ? parseInt(page) : 1;\n        limit = limit ? parseInt(limit) : 20;\n\n        try { \n            const userAuctions = await Auction.find({ relatedUser: id }).populate('relatedCategory relatedUser')\n                                .sort({ creationDate: -1 })\n                                .limit(limit)\n                                .skip((page - 1) * limit);\n                                \n            const userAuctionsCount = await Auction.count({ relatedUser : id});\n            \n            const pageCount = Math.ceil(userAuctionsCount / limit);\n            let response = new ApiResponse(userAuctions, page, pageCount, limit, userAuctionsCount);\n            response.addSelfLink(req);\n\n            if (page > 1) {\n                response.addPrevLink(req);\n            }\n            if (page < pageCount) {\n                response.addNextLink(req);\n            }\n            res.send(response);\n        } catch(err){\n            next(err);\n        }\n    }, \n\n\n    async getUserFavoriteBarters(req, res, next) {\n        let { id } = req.params;\n        checkIfUserExist(id, next);\n        \n        let { page, limit } = req.query;\n        \n        page = page ? parseInt(page) : 1;\n        limit = limit ? parseInt(limit) : 20;\n\n        try { \n            const userFavBarters = await FavBarter.find({ user: id }).populate({\n                path: 'barter',\n                model: 'barter',\n                populate: {\n                  path: 'relatedUser relatedCategory'\n                }\n              })\n            .sort({ creationDate: -1 })\n            .limit(limit)\n            .skip((page - 1) * limit);\n            \n            const userFavBartersCount = await FavBarter.count({ user : id});\n            \n            const pageCount = Math.ceil(userFavBartersCount / limit);\n            let response = new ApiResponse(userFavBarters, page, pageCount, limit, userFavBartersCount);\n            response.addSelfLink(req);\n\n            if (page > 1) {\n                response.addPrevLink(req);\n            }\n            if (page < pageCount) {\n                response.addNextLink(req);\n            }\n            res.send(response);\n        } catch(err){\n            next(err);\n        }\n    },\n\n\n    async getUserFavoriteAuctions(req, res, next) {\n        let { id } = req.params;\n        checkIfUserExist(id, next);\n        \n        let { page, limit } = req.query;\n        \n        page = page ? parseInt(page) : 1;\n        limit = limit ? parseInt(limit) : 20;\n\n        try { \n            const userFavAuctions = await FavAuction.find({ user: id }).populate({\n                path: 'auction',\n                model: 'auction',\n                populate: {\n                  path: 'relatedUser relatedCategory'\n                }\n            })\n            .sort({ creationDate: -1 })\n            .limit(limit)\n            .skip((page - 1) * limit);\n            \n            const userFavAuctionsCount = await FavAuction.count({ user : id});\n            \n            const pageCount = Math.ceil(userFavAuctionsCount / limit);\n            let response = new ApiResponse(userFavAuctions, page, pageCount, limit, userFavAuctionsCount);\n            response.addSelfLink(req);\n\n            if (page > 1) {\n                response.addPrevLink(req);\n            }\n            if (page < pageCount) {\n                response.addNextLink(req);\n            }\n            res.send(response);\n        } catch(err){\n            next(err);\n        }\n    },\n\n\n    async updateFavBarter(req, res, next) {\n        const { id } = req.params;\n        checkIfUserExist(id, next);\n        \n        if(!req.body.barter) {\n            return next(new ApiError(422, 'barter is required'))\n        };\n\n        try {\n            const barter = await Barter.findById(req.body.barter);\n            if(!barter)\n                return next(new ApiError.NotFound('Barter'))\n\n            const userFavBarter = await FavBarter.findOne({ user: id , barter: barter.id });\n            if (!userFavBarter) {\n                const createdUserFavBarter = await FavBarter.create({ user: id , barter: req.body.barter });\n                res.status(200).send(createdUserFavBarter);\n            }\n            // Already Exist Nothing to do..\n            res.send();\n        }\n        catch (err) {\n            next(err);\n        }\n    },\n\n\n    async updateFavAuction(req, res, next) {\n        const { id } = req.params;\n        checkIfUserExist(id, next);\n        \n        if(!req.body.auction) {\n            return next(new ApiError(422, 'auction is required'))\n        };\n\n        try {\n            const auction = await Auction.findById(req.body.auction);\n            if(!auction)\n                return next(new ApiError.NotFound('Auction'))\n\n            const userFavAuction = await FavBarter.findOne({ user: id , auction: auction.id });\n            if (!userFavAuction) {\n                const createdUserFavAuction= await FavAuction.create({ user: id , auction: req.body.auction });\n                res.status(200).send(createdUserFavAuction);\n            }\n            // Already Exist Nothing to do..\n            res.send();\n        }\n        catch (err) {\n            next(err);\n        }\n    },\n\n    async deleteFavBarter(req, res, next) {\n        const { id, barterId } = req.params;\n        try {\n            const deletedFavBarter = await FavBarter.findOne({ user : id, barter: barterId}).remove();\n            if (!deletedFavBarter)\n                return next(new ApiError.NotFound('User FavouriteBarter'));\n            res.status(204).send();\n        }\n        catch (err) {\n            next(err);\n        }\n    },\n    \n    \n    async deleteFavAuction(req, res, next) {\n        const { id, auctionId } = req.params;\n        try {\n            const deletedFavAuction = await FavAuction.findOne({ user : id, auction: auctionId}).remove();\n            if (!deletedFavAuction)\n                return next(new ApiError.NotFound('User FavouriteAuction'));\n            res.status(204).send();\n        }\n        catch (err) {\n            next(err);\n        }\n    }\n}\n"]}