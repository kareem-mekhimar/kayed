{"version":3,"sources":["../../../src/services/handlers/offer-messages.handler.js"],"names":["OfferMessageHandler","io","init","nsp","of","on","console","log","socket","room","data","offerId","join","create","message","findById","id","populate","to","emit","sendNotificationToOwner","relatedBarterOffer","barterOffer","relatedBarter","barter","user","relatedUser","offerUser","offerMessageNotification","targetUserId"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;IACMA,mB;AAEF,iCAAYC,EAAZ,EAAgB;AAAA;;AACZ,aAAKA,EAAL,GAAUA,EAAV;AACA,aAAKC,IAAL;AACH;;;;+BAEM;AAAA;;AACH,gBAAIC,MAAM,KAAKF,EAAL,CAAQG,EAAR,CAAW,SAAX,CAAV;;AAEAD,gBAAIE,EAAJ,CAAO,YAAP,EAAqB,kBAAU;AAC3BC,wBAAQC,GAAR,CAAY,YAAZ;;AAEAC,uBAAOH,EAAP,CAAU,WAAV,EAAuB,gBAAQ;AAC3BC,4BAAQC,GAAR,CAAY,MAAZ;AACAC,2BAAOC,IAAP,GAAcC,KAAKC,OAAnB;AACAH,2BAAOI,IAAP,CAAYF,KAAKC,OAAjB;AACH,iBAJD;;AAMAH,uBAAOH,EAAP,CAAU,YAAV;AAAA,uFAAwB,iBAAMK,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACA,uBAAaG,MAAb,CAAoBH,IAApB,CADA;;AAAA;AAChBI,+CADgB;AAAA;AAAA,+CAEJ,uBAAaC,QAAb,CAAsBD,QAAQE,EAA9B,EAAkCC,QAAlC,CAA2C,aAA3C,CAFI;;AAAA;AAEpBH,+CAFoB;;AAGpBX,4CAAIe,EAAJ,CAAOV,OAAOC,IAAd,EAAoBU,IAApB,CAAyB,YAAzB,EAAuCL,OAAvC;;AAHoB;AAAA,+CAKd,MAAKM,uBAAL,CAA6BN,OAA7B,CALc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAxB;;AAAA;AAAA;AAAA;AAAA;AAOH,aAhBD;AAiBH;;;;kGAG6BA,O;;;;;;AAC1BR,wCAAQC,GAAR,CAAY,eAAZ;;uCAC0B,sBAAYQ,QAAZ,CAAqBD,QAAQO,kBAA7B,C;;;AAApBC,2C;;uCACe,iBAAOP,QAAP,CAAgBO,YAAYC,aAA5B,C;;;AAAfC,sC;;uCAE+B,mCAAyBX,MAAzB,CAAgC;AACjEY,0CAAMD,OAAOE,WADoD;AAEjEC,+CAAWb,QAAQY,WAF8C;AAGjEL,wDAAoBP,QAAQO;AAHqC,iCAAhC,C;;;AAAjCO,wD;AAMAC,4C,GAAe,I;;;AAEnB,oCAAGP,YAAYI,WAAZ,IAA2BE,yBAAyBH,IAAvD,EAA4D;AAAE;AACzDI,mDAAeL,OAAOE,WAAtB;AACJ,iCAFD,MAGI;AAAE;AACDG,mDAAeP,YAAYI,WAA3B;AACJ;;AAEGvB,mC,GAAM,KAAKF,EAAL,CAAQG,EAAR,CAAW,oBAAoByB,YAApB,GAAmC,iBAA9C,C;;uCAEuB,mCAAyBd,QAAzB,CAAkCa,yBAAyBZ,EAA3D,EAA+DC,QAA/D,CAAwE,8BAAxE,C;;;AAAjCW,wD;;AACAzB,oCAAIgB,IAAJ,CAAS,YAAT,EAAuBS,wBAAvB;;;uCAEM,qDAAuB,aAAvB,EAAsCA,wBAAtC,EAAgEC,YAAhE,C;;;;;;;;;;;;;;;;;;;;;kBAKC7B,mB","file":"offer-messages.handler.js","sourcesContent":["import OfferMessage from \"../../models/offer-message.model\";\nimport Barter from \"../../models/barter.model\";\nimport BarterOffer from \"../../models/barter-offer.model\";\nimport OfferMessageNotification from \"../../models/offer-message-notification.model\";\nimport { sendNotificationToUser} from '../../helpers/PushNotificationsHelper';\nclass OfferMessageHandler {\n\n    constructor(io) {\n        this.io = io;\n        this.init();\n    }\n\n    init() {\n        let nsp = this.io.of(\"/offers\");\n\n        nsp.on(\"connection\", socket => {\n            console.log(\"Connection\");\n\n            socket.on(\"offerJoin\", data => {\n                console.log(\"join\")\n                socket.room = data.offerId;\n                socket.join(data.offerId);\n            });\n\n            socket.on(\"newMessage\", async data => {\n                let message = await OfferMessage.create(data);\n                message = await OfferMessage.findById(message.id).populate(\"relatedUser\");\n                nsp.to(socket.room).emit(\"newMessage\", message);\n\n                await this.sendNotificationToOwner(message);\n            });\n        })\n    }\n\n\n    async sendNotificationToOwner(message) {\n        console.log(\"Send to owner\") ;\n        const barterOffer = await BarterOffer.findById(message.relatedBarterOffer);\n        const barter = await Barter.findById(barterOffer.relatedBarter);\n        \n        let offerMessageNotification = await OfferMessageNotification.create({ \n            user: barter.relatedUser,\n            offerUser: message.relatedUser,\n            relatedBarterOffer: message.relatedBarterOffer\n        });\n\n        let targetUserId = null ;\n        \n        if(barterOffer.relatedUser == offerMessageNotification.user){ // Send To owner\n             targetUserId = barter.relatedUser ;\n        }\n        else{ // Send to offer guy\n             targetUserId = barterOffer.relatedUser ; \n        }\n        \n        let nsp = this.io.of(\"/notifications/\" + targetUserId + \"/offer-messages\");\n\n        offerMessageNotification = await OfferMessageNotification.findById(offerMessageNotification.id).populate('offerUser relatedBarterOffer');\n        nsp.emit(\"newMessage\", offerMessageNotification);\n\n        await sendNotificationToUser('رسالة جديدة', offerMessageNotification, targetUserId);\n    }\n}\n\n\nexport default OfferMessageHandler"]}