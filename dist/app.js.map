{"version":3,"sources":["../src/app.js"],"names":["Promise","global","connect","mongoUrl","useMongoClient","connection","on","console","log","err","app","use","get","req","res","setHeader","send","static","join","__dirname","next","contype","headers","indexOf","status","error","json","limit","urlencoded","extended","parameterLimit","customValidators","isArray","Array","value","Error","success","message"],"mappings":"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","file":"app.js","sourcesContent":["\nimport express from \"express\";\nimport path from \"path\";\nimport bodyparser from \"body-parser\";\nimport cors from \"cors\";\nimport expressValidator from \"express-validator\";\nimport helmet from \"helmet\" ;\nimport mongoose from \"mongoose\";\n\n\nimport swaggerSpec from \"./services/swagger\" ; \nimport config from \"./config\";\nimport router from \"./routes\";\nmongoose.Promise = global.Promise;\nmongoose.connect(config.mongoUrl, { useMongoClient: true } );\n// mongoose.set('debug', true);\n\nmongoose.connection.on('connected', () => console.log('\\x1b[32m%s\\x1b[0m', '[DB] Connected...')); \nmongoose.connection.on('error', err => console.log('\\x1b[31m%s\\x1b[0m', '[DB] Error : ' + err));\nmongoose.connection.on('disconnected', () => console.log('\\x1b[31m%s\\x1b[0m', '[DB] DisConnected...'));\n\nconst app = express();\n\napp.use(cors());\napp.use(helmet()) ;\n\n\napp.get('/swagger.json', function (req, res) {\n    res.setHeader('Content-Type', 'application/json');\n    res.send(swaggerSpec);\n});\n\napp.use('/docs',express.static(path.join(__dirname, 'docs')));\napp.use('/uploads',express.static(path.join(__dirname, 'uploads'))) ;\n\n\n// Ensure Content Type\napp.use('/', (req, res, next) => {\n    let contype = req.headers['content-type'];\n    if (contype && (contype.indexOf('application/json') !== 0))\n        return res.status(415).send({ error: \"Unsupported Media Type (\" + contype + \")\" });\n    next();\n});\n\n\napp.use(bodyparser.json({limit: '50mb'}));\napp.use(bodyparser.urlencoded({limit: '50mb',extended: true,parameterLimit:50000 }));\n\napp.use(expressValidator({\n    customValidators: {\n        isArray: value => Array.isArray(value)\n    }\n}));\n\n\n//Routes\napp.use('/api/v1', router);\n\n\n//Not Found Handler\napp.use((req, res, next) => {\n    const error = new Error(\"Not Found..!\");\n    error.status = 404;\n    next(error);\n});\n\n\n//ERROR Handler\napp.use((err, req, res, next) => {\n    const status = err.status ? err.status : 500;\n    res.status(status).json({\n        success: false,\n        error: err.message\n    });\n    console.log(err);\n});\n\n\n\nexport default app;\n\n"]}