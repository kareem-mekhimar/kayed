{"version":3,"sources":["../src/app.js"],"names":["AuctionWorker","Promise","global","connect","mongoUrl","useMongoClient","connection","on","console","log","start","err","app","options","key","readFileSync","cert","server","Server","io","set","use","get","req","res","setHeader","send","static","join","__dirname","next","contype","headers","indexOf","status","error","json","limit","urlencoded","extended","parameterLimit","customValidators","isArray","Array","value","Error","success","message"],"mappings":"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","file":"app.js","sourcesContent":["import express from \"express\";\nimport http from 'http';\nimport https from 'https';\nimport fs from 'fs';\nimport path from \"path\";\nimport bodyparser from \"body-parser\";\nimport cors from \"cors\";\nimport expressValidator from \"express-validator\";\nimport helmet from \"helmet\";\nimport mongoose from \"mongoose\";\nimport SocketIO from \"socket.io\" ;\n\nimport EventHandler from \"./services/handlers\"\nimport swaggerSpec from \"./services/swagger\";\nimport config from \"./config\";\nimport router from \"./routes\";\nimport * as AuctionWorker from \"./services/auction-worker\";\n\n\nmongoose.Promise = global.Promise;\nmongoose.connect(config.mongoUrl, { useMongoClient: true });\n// mongoose.set('debug', true);\n\nmongoose.connection.on('connected', () => {\n    console.log('\\x1b[32m%s\\x1b[0m', '[DB] Connected...');\n\n    AuctionWorker.start();\n});\n\nmongoose.connection.on('error', err => console.log('\\x1b[31m%s\\x1b[0m', '[DB] Error : ' + err));\nmongoose.connection.on('disconnected', () => console.log('\\x1b[31m%s\\x1b[0m', '[DB] DisConnected...'));\n\nconst app = express();\nlet options = {\n    key: fs.readFileSync('kayed-key.pem'),\n    cert: fs.readFileSync('kayed-cert.pem')\n};\nconst server = https.Server(options, app);\nconst io = new SocketIO(server);\nnew EventHandler(io) ;\napp.set('io', io);\n\n \napp.use(cors());\napp.use(helmet());\n\n\napp.get('/swagger.json', function (req, res) {\n    res.setHeader('Content-Type', 'application/json');\n    res.send(swaggerSpec);\n});\n\napp.use('/docs', express.static(path.join(__dirname, 'docs')));\napp.use('/uploads', express.static(path.join(__dirname, 'uploads')));\n\n\n// Ensure Content Type\napp.use('/', (req, res, next) => {\n    let contype = req.headers['content-type'];\n    if (contype && (contype.indexOf('application/json') !== 0))\n        return res.status(415).send({ error: \"Unsupported Media Type (\" + contype + \")\" });\n    next();\n});\n\n\napp.use(bodyparser.json({ limit: '50mb' }));\napp.use(bodyparser.urlencoded({ limit: '50mb', extended: true, parameterLimit: 50000 }));\n\napp.use(expressValidator({\n    customValidators: {\n        isArray: value => Array.isArray(value)\n    }\n}));\n\n\n//Routes\napp.use('/api/v1', router);\n\n\n//Not Found Handler\napp.use((req, res, next) => {\n    const error = new Error(\"Not Found..!\");\n    error.status = 404;\n    next(error);\n});\n\n\n//ERROR Handler\napp.use((err, req, res, next) => {\n    const status = err.status ? err.status : 500;\n    res.status(status).json({\n        success: false,\n        error: err.message\n    });\n    console.log(err);\n});\n\n\n\nexport default server;\n\n"]}